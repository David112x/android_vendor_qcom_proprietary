////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxchinodedepth.h
/// @brief Chi node for depth
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXCHINODEDEPTH_H
#define CAMXCHINODEDEPTH_H

#include "chinode.h"
#include "camxchinodeutil.h"
#include "depthmapwrapper.h"

// NOWHINE FILE NC004c: Things outside the Camx namespace should be prefixed with Camx/CSL

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Chi node structure for Chi interface.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ChiDepthNode
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Initialize
    ///
    /// @brief  Initialization required to create a node
    ///
    /// @param  pCreateInfo  Pointer to a structure that defines create session information for the node.
    ///
    /// @return CDKResultSuccess if success or appropriate error code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult Initialize(
        CHINODECREATEINFO* pCreateInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// QueryBufferInfo
    ///
    /// @brief  Implementation of PFNNODEQUERYBUFFERINFO defined in chinode.h
    ///
    /// @param  pQueryBufferInfo  Pointer to a structure to query the input buffer resolution and type.
    ///
    /// @return CDKResultSuccess if success or appropriate error code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult QueryBufferInfo(
        CHINODEQUERYBUFFERINFO* pQueryBufferInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetBufferInfo
    ///
    /// @brief  Implementation of PFNNODESETBUFFERINFO defined in chinode.h
    ///
    /// @param  pSetBufferInfo  Pointer to a structure with information to set the output buffer resolution and type.
    ///
    /// @return CDKResultSuccess if success or appropriate error code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult SetBufferInfo(
        CHINODESETBUFFERPROPERTIESINFO* pSetBufferInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ProcessRequest
    ///
    /// @brief  Implementation of PFNNODEPROCREQUEST defined in chinode.h
    ///
    /// @param  pProcessRequestInfo  Pointer to a structure that defines the information required for processing a request.
    ///
    /// @return CDKResultSuccess if success or appropriate error code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult ProcessRequest(
        CHINODEPROCESSREQUESTINFO* pProcessRequestInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PostPipelineCreate
    ///
    /// @brief  Implementation of PFNPOSTPIPELINECREATE defined in chinode.h
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult PostPipelineCreate();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ChiDepthNode
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ChiDepthNode();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~ChiDepthNode
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~ChiDepthNode();
private:
    ChiDepthNode(const ChiDepthNode&) = delete;               ///< Disallow the copy constructor
    ChiDepthNode& operator=(const ChiDepthNode&) = delete;    ///< Disallow assignment operator

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetVendorTagBase
    ///
    /// @brief  Get vendor tag base
    ///
    /// @return CDKResultSuccess or error code
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult GetVendorTagBases();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// InitConversionLib
    ///
    /// @brief  Initialize conversion library
    ///
    /// @return CDKResultSuccess or error code
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult InitConversionLib();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PublishExposureData
    ///
    /// @brief  Publish exposure data to a vendor tag
    ///
    /// @param  requestId     Request Id.
    /// @param  exposureTime  Exposure time in nanoseconds.
    ///
    /// @return CDKResultSuccess or error code
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult PublishExposureData(
        UINT64 requestId,
        UINT64 exposureTime);

    CHIHANDLE           m_hChiSession;  ///< The Chi session handle
    UINT32              m_nodeId;       ///< The node's Id
    UINT32              m_nodeCaps;     ///< The selected node caps
    CHINODEIMAGEFORMAT  m_inputSize;
    CHINODEIMAGEFORMAT  m_outputSize;
    UINT64              m_initialExposureTime;
    INT32               m_initialSensitivity;
    DepthMapWrapper*    m_DepthMapWrapper;

    typedef DepthMapWrapper*(*CREATEDEPTHMAPWRAPPER)(
        INT32   width,
        INT32   height,
        INT32   dm_width,
        INT32   dm_height,
        UINT64* exposureTime,
        INT32*  sensitivity,
        UINT8   is_secure);
    typedef void(*DESTROYDEPTHMAPWRAPPER)(
        DepthMapWrapper* pDepthMapWrapper);
    typedef bool(*PROCESSFRAME)(
        DepthMapWrapper*       pDepthMapWrapper,
        WrapperDepthInput      in_image,
        WrapperDepthCamConfig* wrapper_depth_map_config,
        UINT32                 num_outputs,
        WrapperDepthOutput     outputs[]);

    CHILIBRARYHANDLE       m_hDepthLib;
    CREATEDEPTHMAPWRAPPER  m_createDepthMapWrapper;
    DESTROYDEPTHMAPWRAPPER m_destroyDepthMapWrapper;
    PROCESSFRAME           m_processFrame;

    BOOL    m_vendorTagsInited;
    BOOL    m_conversionLibInited;
    UINT32  m_sensorModeInfoVendorTagBase;
    UINT32  m_depthStreamDimensionVendorTagBase;
    UINT32  m_AECDataVendorTagBase;
    UINT32  m_AECDataPublisherPresentVendorTagBase;
    UINT32  m_frameCountVendorTagBase;
    BOOL    m_isSecureMode;
};
#endif // CAMXCHINODEDEPTH_H
