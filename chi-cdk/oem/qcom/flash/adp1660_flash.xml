<?xml version="1.0" encoding="utf-8" ?>
<!--
========================================================================
   Copyright(c) 2018 Qualcomm Technologies, Inc.
   All Rights Reserved.
   Confidential and Proprietary - Qualcomm Technologies, Inc.
========================================================================
-->
<flashDriverData
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../api/sensor/camxflashdriver.xsd">
  <module_version major_revision="1" minor_revision="0" incr_revision="0"/>
  <!--Name of the flash -->
  <flashName>adp1660</flashName>  <!--Flash driver type
      Valid values are: PMIC, I2C -->
  <flashDriverType>I2C</flashDriverType>
  <!--Sequence of power configuration type and configuration value required to control power to the device -->
  <powerUpSequence>
    <!--Power setting configuration
        Contains: configType, configValue and delay in milli seconds -->
    <powerSetting>
      <!--Power configuration type
          Supported types are: MCLK, VANA, VDIG, VIO, VAF, RESET, STANDBY -->
      <configType>VAF</configType>
      <!--Configuration value for the type of configuration -->
      <configValue>0</configValue>
      <!--Delay in milli seconds -->
      <delayMs>1</delayMs>
    </powerSetting>
  </powerUpSequence>
  <!--Sequence of power configuration type and configuration value required to control power to the device -->
  <powerDownSequence>
    <!--Power setting configuration
        Contains: configType, configValue and delay in milli seconds -->
    <powerSetting>
      <!--Power configuration type
          Supported types are: MCLK, VANA, VDIG, VIO, VAF, RESET, STANDBY -->
      <configType>VAF</configType>
      <!--Configuration value for the type of configuration -->
      <configValue>0</configValue>
      <!--Delay in milli seconds -->
      <delayMs>1</delayMs>
    </powerSetting>
  </powerDownSequence>
  <!--Slave and settings for I2C based flash
      This information is available only for I2C based flash
       element for slaveAddress
       elemet for regAddrType
       element for regDataType
       element for I2CFrequencyMode
       element for flashInitSettings
       element for flashOffSettings
       element for flashLowSettings
       element for flashHighSettings  -->
  <i2cInfo>
    <!--8-bit or 10-bit I2C slave Write address -->
    <slaveAddress>0xE4</slaveAddress>
    <!--Register address / data size in bytes -->
    <regAddrType>0</regAddrType>
    <!--Register address / data size in bytes -->
    <regDataType>0</regDataType>
    <!--I2C frequency mode of slave
        Supported modes are: STANDARD (100 KHz), FAST (400 KHz), FAST_PLUS (1 MHz), CUSTOM (Custom frequency in DTSI) -->
    <i2cFrequencyMode>FAST</i2cFrequencyMode>
    <!--Sequence of register settings to configure the device -->
    <flashInitSettings>
      <!--Register setting configuration
          Contains: register address, register data, register address type, register data type,
          operation and delay in micro seconds
           element for slaveAddr
           element for registerAddr
           element for registerData
           element for regAddrType
           element for regDataType
           element for operation
           element for delayUs  -->
      <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x01</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x3</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x02</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0xF</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x09</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x28</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x03</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x9</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
    </flashInitSettings>
    <!--Sequence of register settings to configure the device -->
    <flashOffSettings>
      <!--Register setting configuration
          Contains: register address, register data, register address type, register data type,
          operation and delay in micro seconds
           element for slaveAddr
           element for registerAddr
           element for registerData
           element for regAddrType
           element for regDataType
           element for operation
           element for delayUs  -->
      <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0xf</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x00</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
    </flashOffSettings>
    <!--Sequence of register settings to configure the device -->
    <flashLowSettings>
      <!--Register setting configuration
          Contains: register address, register data, register address type, register data type,
          operation and delay in micro seconds
           element for slaveAddr
           element for registerAddr
           element for registerData
           element for regAddrType
           element for regDataType
           element for operation
           element for delayUs  -->
      <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x8</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x4</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x06</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x28</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x01</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0xBD</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0xf</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x1</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x81</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x20</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
    </flashLowSettings>
    <!--Sequence of register settings to configure the device -->
    <flashHighSettings>
      <!--Register setting configuration
          Contains: register address, register data, register address type, register data type,
          operation and delay in micro seconds
           element for slaveAddr
           element for registerAddr
           element for registerData
           element for regAddrType
           element for regDataType
           element for operation
           element for delayUs  -->
      <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x2</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x4f</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
      <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x6</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x3c</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x09</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0x3c</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x0f</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0xc</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
	  <regSetting>
        <!--Register address that is accessed -->
        <registerAddr>0x01</registerAddr>
        <!--List of data items in bytes seperated by space as delimiter.
            Data may be written to an I2C slave in burst mode.
            If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
            For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, and the I2C slave will internally increment the address for each
            registerData item.
            For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
            at the location specified by registerAddr, but the address is explicitly generated by the driver for each
            registerData item in the list.
            If operation is READ, registerData is the number of bytes to be read from the specified register address -->
        <registerData>0xbb</registerData>
        <!--Register address / data size in bytes -->
        <regAddrType>1</regAddrType>
        <!--Register address / data size in bytes -->
        <regDataType>1</regDataType>
        <!--Type of I2C operation
            Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
        <operation>WRITE</operation>
      </regSetting>
    </flashHighSettings>
  </i2cInfo>
  <!--Number of Flash supported in kernel
      Valid values for are: 1, 2 and 3 -->
  <numberOfFlashs>1</numberOfFlashs>
</flashDriverData>
