<?xml version="1.0" encoding="utf-8" ?>
<!--
========================================================================
   Copyright(c) 2019 Qualcomm Technologies, Inc.
   All Rights Reserved.
   Confidential and Proprietary - Qualcomm Technologies, Inc.
========================================================================
-->
<EEbinDriver
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="..\..\..\api\sensor\eebin\camxeebindriver.xsd">
  <module_version major_revision="1" minor_revision="0" incr_revision="0"/>

  <!--EEBin slave information
       element for slaveAddress
       element for I2CFrequencyMode
       element for power up sequence
       element for power down sequence  -->
  <slaveInfo description="EEPROM Slave Information">
    <!--8-bit or 10-bit I2C slave address to access EEbinData -->
    <slaveAddress>0x00</slaveAddress>
    <!--I2C frequency mode of slave
        Supported modes are: STANDARD (100 KHz), FAST (400 KHz), FAST_PLUS (1 MHz), CUSTOM (Custom frequency in DTSI) -->
    <i2cFrequencyMode>FAST</i2cFrequencyMode>
    <!--Sequence of power configuration type and configuration value required to control power to the device -->
    <powerUpSequence>
      <!--Power setting configuration
          Contains: configType, configValue and delay in milli seconds -->
      <powerSetting>
        <!--Power configuration type
            Supported types are: MCLK, VANA, VDIG, VIO, VAF, RESET, STANDBY -->
        <configType>VIO</configType>
        <!--Configuration value for the type of configuration -->
        <configValue>0</configValue>
        <!--Delay in milli seconds -->
        <delayMs>0</delayMs>
      </powerSetting>
    </powerUpSequence>
    <!--Sequence of power configuration type and configuration value required to control power to the device -->
    <powerDownSequence>
      <!--Power setting configuration
          Contains: configType, configValue and delay in milli seconds -->
      <powerSetting>
        <!--Power configuration type
            Supported types are: MCLK, VANA, VDIG, VIO, VAF, RESET, STANDBY -->
        <configType>VIO</configType>
        <!--Configuration value for the type of configuration -->
        <configValue>0</configValue>
        <!--Delay in milli seconds -->
        <delayMs>0</delayMs>
      </powerSetting>
    </powerDownSequence>
  </slaveInfo>
  <!--Sequence of register settings to configure the device -->
  <versionReadInfo>
    <!--Register setting configuration
        Contains: register address, register data, register address type, register data type,
        operation and delay in micro seconds
         element for slaveAddr
         element for registerAddr
         element for registerData
         element for regAddrType
         element for regDataType
         element for operation
         element for delayUs  -->
    <regSetting>
      <!--Slave address to communicate with the device -->
      <slaveAddr>0</slaveAddr>
      <!--Register address that is accessed -->
      <registerAddr>0x00</registerAddr>
      <!--List of data items in bytes seperated by space as delimiter.
          Data may be written to an I2C slave in burst mode.
          If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
          For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
          at the location specified by registerAddr, and the I2C slave will internally increment the address for each
          registerData item.
          For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
          at the location specified by registerAddr, but the address is explicitly generated by the driver for each
          registerData item in the list.
          If operation is READ, registerData is the number of bytes to be read from the specified register address -->
      <registerData>0x0FFF</registerData>
      <!--Register address / data size in bytes -->
      <regAddrType range="[1,4]">1</regAddrType>
      <!--Register address / data size in bytes -->
      <regDataType range="[1,4]">1</regDataType>
      <!--Type of I2C operation
          Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
      <operation>READ</operation>
    </regSetting>
  </versionReadInfo>
  <!--Specifies information to format the version to identify EEBin read is needed or not and read details
       element for formating the EEBin version read
       element for formating the EEBin read start address
       element for formating the EEBin read end address -->
  <versionFormatInfo>
    <!--Specifies memory offset value and length in bytes information -->
    <version>
      <!--Offset value in the memory read -->
      <offset>0x50</offset>
      <!--number of bytes of data to be read from the specified offset  -->
      <lengthInBytes>11</lengthInBytes>
    </version>
    <!--Specifies memory offset value and length in bytes information -->
    <readStartAddress>
      <!--Offset value in the memory read -->
      <offset>0xE0</offset>
      <!--number of bytes of data to be read from the specified offset  -->
      <lengthInBytes>0x04</lengthInBytes>
    </readStartAddress>
    <!--Specifies memory offset value and length in bytes information -->
    <readEndAddress>
      <!--Offset value in the memory read -->
      <offset>0xE4</offset>
      <!--number of bytes of data to be read from the specified offset  -->
      <lengthInBytes>0x04</lengthInBytes>
    </readEndAddress>
  </versionFormatInfo>
  <!--Sequence of register settings to configure the device -->
  <dataReadInfo>
    <!--Register setting configuration
        Contains: register address, register data, register address type, register data type,
        operation and delay in micro seconds
         element for slaveAddr
         element for registerAddr
         element for registerData
         element for regAddrType
         element for regDataType
         element for operation
         element for delayUs  -->
    <regSetting>
      <!--Slave address to communicate with the device -->
      <slaveAddr>0</slaveAddr>
      <!--Register address that is accessed -->
      <registerAddr>0</registerAddr>
      <!--List of data items in bytes seperated by space as delimiter.
          Data may be written to an I2C slave in burst mode.
          If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
          For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
          at the location specified by registerAddr, and the I2C slave will internally increment the address for each
          registerData item.
          For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
          at the location specified by registerAddr, but the address is explicitly generated by the driver for each
          registerData item in the list.
          If operation is READ, registerData is the number of bytes to be read from the specified register address -->
      <registerData>0</registerData>
      <!--Register address / data size in bytes -->
      <regAddrType range="[1,4]">2</regAddrType>
      <!--Register address / data size in bytes -->
      <regDataType range="[1,4]">1</regDataType>
      <!--Type of I2C operation
          Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
      <operation>READ</operation>
    </regSetting>
  </dataReadInfo>
  <!--Sequence of register settings to configure the device -->
  <dataWriteInfo>
    <!--Register setting configuration
        Contains: register address, register data, register address type, register data type,
        operation and delay in micro seconds
         element for slaveAddr
         element for registerAddr
         element for registerData
         element for regAddrType
         element for regDataType
         element for operation
         element for delayUs  -->
    <regSetting>
      <!--Slave address to communicate with the device -->
      <slaveAddr>0x00</slaveAddr>
      <!--Register address that is accessed -->
      <registerAddr>0x1000</registerAddr>
      <!--List of data items in bytes seperated by space as delimiter.
          Data may be written to an I2C slave in burst mode.
          If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.
          For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting
          at the location specified by registerAddr, and the I2C slave will internally increment the address for each
          registerData item.
          For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting
          at the location specified by registerAddr, but the address is explicitly generated by the driver for each
          registerData item in the list.
          If operation is READ, registerData is the number of bytes to be read from the specified register address -->
      <registerData>0</registerData>
      <!--Register address / data size in bytes -->
      <regAddrType range="[1,4]">1</regAddrType>
      <!--Register address / data size in bytes -->
      <regDataType range="[1,4]">1</regDataType>
      <!--Type of I2C operation
          Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL -->
      <operation>WRITE_SEQUENTIAL</operation>
    </regSetting>
  </dataWriteInfo>
  <!--Specifies the file information of a Hw module
       element for HW Version Info
       element for SW Version Info
       element for Misc Version Info
       element for Binary name
  <moduleInfo>
    <!--HW Version 5 characters -->
    <HWVersion>ABCDE</HWVersion>
    <!--SW Version 4 characters -->
    <SWVersion>DEFG</SWVersion>
    <!--MISC Version 2 characters -->
    <MiscVersion>XY</MiscVersion>
    <!--Full name of the binary file in the format com.vendor.category.modulename.bin
        This name is used as is to find the .bin file in the predefined device paths to load -->
    <binaryName>com.qti.sensormodule.pqrx.bin</binaryName>
  </moduleInfo>
</EEbinDriver>
