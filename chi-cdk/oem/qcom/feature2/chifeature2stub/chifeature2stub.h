////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  chifeature2stub.h
/// @brief CHI test stub feature class declarations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CHIFEATURE2STUB_H
#define CHIFEATURE2STUB_H


#include "chifeature2base.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Feature derived class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CDK_VISIBILITY_PUBLIC ChiFeature2Stub : public ChiFeature2Base
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Create
    ///
    /// @brief  Static function to create test feature
    ///
    /// @param  pCreateInputInfo   Pointer to create input info for test feature
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static ChiFeature2Stub* Create(
        ChiFeature2CreateInputInfo* pCreateInputInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destroy
    ///
    /// @brief  Destructor for test feature.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID Destroy();

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OnInitialize
    ///
    /// @brief  Initializes the test feature.
    ///
    /// @param  pCreateInputInfo Feature create input information.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult OnInitialize(
        ChiFeature2CreateInputInfo* pCreateInputInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoPrepareRequest
    ///
    /// @brief  virtual method to prepare processing request for test feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult DoPrepareRequest(
        ChiFeature2RequestObject* pRequestObject) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OnExecuteProcessRequest
    ///
    /// @brief  virtual method to execute process request for test feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult OnExecuteProcessRequest(
        ChiFeature2RequestObject* pRequestObject) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoProcessResult
    ///
    /// @brief  virtual method to process result callback from CHI driver.
    ///
    /// @param  pResult                 Result from CHI driver.
    /// @param  pPrivateCallbackData    Private callback data.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID DoProcessResult(
        CHICAPTURERESULT*   pResult,
        VOID*               pPrivateCallbackData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoProcessMessage
    ///
    /// @brief  virtual method to process message callback from CHI driver.
    ///
    /// @param  pMessageDescriptor      Message from CHI driver.
    /// @param  pPrivateCallbackData    Private callback data.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID DoProcessMessage(
        const CHIMESSAGEDESCRIPTOR* pMessageDescriptor,
        VOID*                       pPrivateCallbackData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoProcessPartialResult
    ///
    /// @brief  virtual method to process partial capture result callback from CHI driver.
    ///
    /// @param  pCaptureResult          Partial capture result from CHI driver.
    /// @param  pPrivateCallbackData    Private callback data.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID DoProcessPartialResult(
        CHIPARTIALCAPTURERESULT*   pCaptureResult,
        VOID*                      pPrivateCallbackData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoCleanupRequest
    ///
    /// @brief  virtual method to cleanup processing request.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult DoCleanupRequest(
        ChiFeature2RequestObject* pRequestObject) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoFlush
    ///
    /// @brief  virtual method to flush.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult DoFlush();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoDestroy
    ///
    /// @brief  virtual method to destroy.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID DoDestroy();

private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ChiFeature2Stub
    ///
    /// @brief  Deafault constructor.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ChiFeature2Stub() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~ChiFeature2Stub
    ///
    /// @brief  Virtual Destructor.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~ChiFeature2Stub() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RequestThread
    ///
    /// @brief  Receives request for thread and calls StubThreadHandler
    ///
    /// @param  pThreadData  Thread info
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static VOID* RequestThread(
        VOID* pThreadData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// StubThreadHandler
    ///
    /// @brief  Waits for thread to be signaled, calls ExecuteProcessRequestHelper after receiving signal
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID StubThreadHandler();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ExecuteProcessRequestHelper
    ///
    /// @brief  Executes processing after being called in thread
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID ExecuteProcessRequestHelper(
        ChiFeature2RequestObject* pRequestObject);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DeQueue
    ///
    /// @brief  Remove FRO from StubThreadQueue
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ChiFeature2RequestObject* DeQueue();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// EnQueue
    ///
    /// @brief  Adds FRO to StubThreadQueue
    ///
    /// @param  pRequestObject   Feature request object instance.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID EnQueue(
        ChiFeature2RequestObject* pRequestObject);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Empty
    ///
    /// @brief  Check if StubThreadQueue is empty
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL Empty();

    ChiFeature2Stub(const ChiFeature2Stub&) = delete;                       ///< Disallow the copy constructor
    ChiFeature2Stub& operator= (const ChiFeature2Stub&) = delete;           ///< Disallow assignment operator

    PerThreadData      m_stubRequestProcessThread;                          ///< Thread to process the FRO
    Mutex*             m_pStubThreadMutex;                                  ///< StubThread mutex
    Condition*         m_pStubRequestAvailable;                             ///< Wait till StubThreadQueue is ready
    volatile BOOL      m_stubRequestProcessTerminate;                       ///< Indication to StubThread

    static const UINT32       StubThreadQueueSize    = 128;                 ///< Size of StubThreadQueue
    UINT32                    m_stubThreadQueueFront = 0;                   ///< Front of StubThreadQueue
    UINT32                    m_stubThreadQueueRear  = 0;                   ///< Rear  of StubThreadQueue
    ChiFeature2RequestObject* m_pStubThreadQueue[StubThreadQueueSize];      ///< StubThreadQueue

};

#endif // CHIFEATURE2STUB_H