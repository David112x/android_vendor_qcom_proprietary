////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  chifeature2serializer.h
/// @brief CHI serializer feature derived class declarations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CHIFEATURE2SERIALIZER_H
#define CHIFEATURE2SERIALIZER_H


#include "chifeature2base.h"
#include "chxextensionmodule.h"

/// @brief serializer map information
struct ChiFeature2SerializerMapInfo
{
    UINT8                       requestId;      ///< Request Index
    UINT8                       dependencyIdx;  ///< Dependency Index
    ChiFeature2PortDescriptor   inputPort;      ///< Input Port Id
    ChiFeature2PortDescriptor   outputPort;     ///< Output Port Id
    VOID*                       pSettings;      ///< Settings(Optional)
};

/// @brief serializer private information
struct ChiFeature2SerializerPrivateInfo
{
    ChiFeature2SerializerMapInfo*   pPortMap;           ///< Port map
    UINT8                           numInputDependency; ///< Number of input dependency
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Feature derived class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ChiFeature2Serializer : public ChiFeature2Base
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Create
    ///
    /// @brief  Static function to create Serializer feature
    ///
    /// @param  pCreateInputInfo   Pointer to create input info for Serializer feature
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static ChiFeature2Serializer* Create(
        ChiFeature2CreateInputInfo* pCreateInputInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destroy
    ///
    /// @brief  Virtual method to destroy.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID Destroy();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateFeature
    ///
    /// @brief  Static function to create Serializer feature
    ///
    /// @param  pCreateInputInfo   Pointer to create input info for Serializer feature
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static VOID* CreateFeature(
        ChiFeature2CreateInputInfo* pCreateInputInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoQueryCaps
    ///
    /// @brief  Static function to query the capabilities of Serializer feature
    ///
    /// @param  pConfig     Pointer to stream configuration
    /// @param  pQueryInfo  Pointer to query capabilities information
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CDKResult DoQueryCaps(
        VOID*                 pConfig,
        ChiFeature2QueryInfo* pQueryInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetVendorTags
    ///
    /// @brief  Static function to get vendor tags
    ///
    /// @param  pVendorTags Pointer to get vendor tags
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static VOID GetVendorTags(
        VOID* pVendorTags);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoStreamNegotiation
    ///
    /// @brief  Static function to do stream negotiation
    ///
    /// @param  pNegotiationInfo    Pointer to negotiation input information
    /// @param  pNegotiationOutput  Pointer to negotiation output information
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CDKResult DoStreamNegotiation(
        StreamNegotiationInfo*      pNegotiationInfo,
        StreamNegotiationOutput*    pNegotiationOutput);

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OnInitialize
    ///
    /// @brief  Function creates Sessions and Pipelines based on input descriptor.
    ///         Derived features can override this to create sessions and pipelines or for virtual camx impl.
    ///
    /// @param  pCreateInputInfo  Feature create input information.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult OnInitialize(
        ChiFeature2CreateInputInfo* pCreateInputInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OnPrepareRequest
    ///
    /// @brief  Virtual method to prepare request for anchorsync feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult OnPrepareRequest(
        ChiFeature2RequestObject* pRequestObject
        ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OnExecuteProcessRequest
    ///
    /// @brief  Virtual method to execute request for anchorsync feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult OnExecuteProcessRequest(
        ChiFeature2RequestObject* pRequestObject
        ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoCleanupRequest
    ///
    /// @brief  Virtual method to cleanup request for Serializer feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult DoCleanupRequest(
        ChiFeature2RequestObject* pRequestObject
        ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoFlush
    ///
    /// @brief  Virtual method to flush request for Serializer feature.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult DoFlush();

private:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HandleDependencyMapping
    ///
    /// @brief  Method to get number of input dependency for Serializer feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult HandleDependencyMapping(
        ChiFeature2RequestObject* pRequestObject
        ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HandleOutputMapping
    ///
    /// @brief  private method to build output data and notify downstream feature.
    ///
    /// @param  pRequestObject  Feature request object instance.
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult HandleOutputMapping(
        ChiFeature2RequestObject* pRequestObject
        ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetInputFromDependency
    ///
    /// @brief  private method to get buffer / metadata from input port.
    ///
    /// @param  pRequestObject  Feature request object instance.
    /// @param  inputBatchIdx   Input index.
    /// @param  dependencyIdx   Dependency index.
    /// @param  pInputPortId    Pointer to input port Id.
    /// @param  pTarget         The pointer of target
    ///
    /// @return CDKResultSuccess if successful or CDK error values in case of error.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult GetInputFromDependency(
        ChiFeature2RequestObject*   pRequestObject,
        UINT8                       inputBatchIdx,
        UINT8                       dependencyIdx,
        ChiFeature2Identifier*      pInputPortId,
        VOID*                       pTarget
        ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ChiFeature2Serializer
    ///
    /// @brief  Deafault constructor.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ChiFeature2Serializer() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~ChiFeature2Serializer
    ///
    /// @brief  Virtual destructor.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~ChiFeature2Serializer() = default;

    ChiFeature2Serializer(const ChiFeature2Serializer&)             = delete;   ///< Disallow the copy constructor
    ChiFeature2Serializer& operator= (const ChiFeature2Serializer&) = delete;   ///< Disallow assignment operator
};

#endif // CHIFEATURE2SERIALIZER_H
