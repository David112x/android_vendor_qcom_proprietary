////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  xmlparser.h
/// @brief Declarations of xml parser.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef XMLPARSER_H
#define XMLPARSER_H

#include "chifeature2log.h"
#include "chxutils.h"
#include "cdkutils.h"
#include <string>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief Class containing functions to use xmllib library for xml parsing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class XmlParser
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// XmlParser
    ///
    /// @brief Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    XmlParser(const CHAR* pXmlFilePath, CDKResult* err);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~XmlParser
    ///
    /// @brief Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~XmlParser();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentStr
    ///
    /// @brief Get content string of a leaf named element
    ///
    /// @param pElementName "\0" terminated leaf element name
    /// @param pContent     Pointer to the return content string (output)
    /// @param pContentLen  Pointer to the return content string length(input/output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentStr(const CHAR* pElementName, CHAR* pContent, SIZE_T* pContentLen);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentStr
    ///
    /// @brief Get integer content of a leaf named element
    ///
    /// @param ppName       Pointer to the array of "\0" terminated element names
    /// @param pContent     Pointer to the return content string (output)
    /// @param pContentLen  Pointer to the return content string length(input/output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentStr(const CHAR** ppName, INT level, CHAR* pContent, SIZE_T* pContentLen);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentInt
    ///
    /// @brief Get integer content of a leaf named element
    ///
    /// @param pElementName "\0" terminated leaf element name
    /// @param pValue       Pointer to the return integer value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentInt(const CHAR* pElementName, INT* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentInt
    ///
    /// @brief Get integer content of a leaf named element
    ///
    /// @param ppName       Pointer to the array of "\0" terminated element names
    /// @param level        number of items in ppName
    /// @param pValue       Pointer to the return integer value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentInt(const CHAR** ppName, INT level, INT* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentULong
    ///
    /// @brief Get unsigned long integer content of a leaf named element
    ///
    /// @param pElementName "\0" terminated leaf element name
    /// @param pValue       Pointer to the return integer value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentULong(const CHAR* pElementName, UINT64* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentULong
    ///
    /// @brief Get unsigned long integer content of a leaf named element
    ///
    /// @param ppName       Pointer to the array of "\0" terminated element names
    /// @param level        number of items in ppName
    /// @param pValue       Pointer to the return integer value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentULong(const CHAR** ppName, INT level, UINT64* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentFloat
    ///
    /// @brief Get float content of a leaf named element
    ///
    /// @param pElementName "\0" terminated leaf element name
    /// @param pValue       Pointer to the return float value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentFloat(const CHAR* pElementName, FLOAT* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElementContentFloat
    ///
    /// @brief Get float content of a leaf named element
    ///
    /// @param ppName       Pointer to the array of "\0" terminated element names
    /// @param level        number of items in ppName
    /// @param pValue       Pointer to the return float value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getNamedElementContentFloat(const CHAR** ppName, INT level, FLOAT* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getRootElement
    ///
    /// @brief Get the root element from parsed xml tree
    ///
    /// @param None
    ///
    /// @return pointer to root element, NULL if fail
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const VOID* getRootElement(VOID);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElement
    ///
    /// @brief Get the named element from parsed xml tree
    ///
    /// @param pName         "\0" terminated element name
    /// @param pStartElement Start element, if NULL then starting from root element
    ///
    /// @return pointer to named element
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const VOID* getNamedElement(const CHAR* pName, const VOID* pStartElement);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getNamedElement
    ///
    /// @brief Get the named element from parsed xml tree
    ///
    /// @param ppName         Pointer to the array of "\0" terminated element names
    /// @param level          number of items in ppName
    /// @param pStartElement Start element, if NULL then starting from root element
    ///
    /// @return pointer to named element
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const VOID* getNamedElement(const CHAR** ppName, INT level, const VOID* pStartElement);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getElementContentStr
    ///
    /// @brief Get content string of a leaf element
    ///
    /// @param pVOID        Pointer to an element
    /// @param pContent     Pointer to the return content string (output)
    /// @param pContentLen  Pointer to the return content string length(input/output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getElementContentStr(const VOID* pVOID, CHAR* pContent, SIZE_T* pContentLen);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getElementContentInt
    ///
    /// @brief Get integer content of a leaf element
    ///
    /// @param pVOID        Pointer to an element
    /// @param pValue       Pointer to the return integer value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getElementContentInt(const VOID* pVOID, INT* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getElementContentFloat
    ///
    /// @brief Get float content of a leaf element
    ///
    /// @param pVOID        Pointer to an element
    /// @param pValue       Pointer to the return float value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getElementContentFloat(const VOID* pVOID, FLOAT* pValue);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getElementContentULong
    ///
    /// @brief Get long integer content of a leaf element
    ///
    /// @param pVOID        Pointer to an element
    /// @param pValue       Pointer to the return integer value (output)
    ///
    /// @return TRUE if leaf element, FALSE if not
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL getElementContentULong(const VOID* pVOID, UINT64* pValue);

private:
    XmlParser(const XmlParser&) = delete;               ///< Disallow the copy constructor
    XmlParser& operator= (const XmlParser&) = delete;   ///< Disallow assignment operator

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// XmlReadFile
    ///
    /// @brief Read in specifiled xml file
    ///
    /// @param pXmlFilePath Xml file path to read in
    /// @param pData        Pointer to store xml text
    ///
    /// @return CDKResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult XmlReadFile(const CHAR* pXmlFilePath, VOID* pData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// getElementNameStr
    ///
    /// @brief Get the element name string
    ///
    /// @param pElement Pointer to the element
    /// @param pNameStr Pointer to the buffer for store returned element name
    /// @param nameLen  Buffer length (input)
    ///
    /// @return Name string length
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SIZE_T getElementNameStr(const VOID* pElement, CHAR* pNameStr, SIZE_T nameLen);

    VOID* m_pXMLRoot;          ///< Parsed xml tree root
    VOID* m_pRootElement;      ///< Root element
    CHAR  m_xmlFilePath[256];  ///< xml file path to be parsed
};

#endif // XMLPARSER_H
