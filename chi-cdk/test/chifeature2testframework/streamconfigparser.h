////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  streamconfigparser.h
/// @brief Declarations of stream config xml parser.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STREAMCONFIGPARSER_H
#define STREAMCONFIGPARSER_H

#include <stdint.h>
#include <string>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "xmlparser.h"
#include "chistatspropertydefines.h"

static const UINT32 MaxNumOutputStreams = 16;
static const UINT32 MaxNumInputStreams  = 16;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief Class containing functions to parse stream_config.xml
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class StreamConfigParser
{
public:

     StreamConfigParser() = default;
    ~StreamConfigParser() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// StreamConfigXml
    ///
    /// @brief parse stream_config.xml file
    ///
    /// @param pStreamConfigName "\0" terminated stream_config.xml file path
    ///
    /// @return CDKResultSuccess for success, set error code if fail.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CDKResult ParseStreamConfigXml(const CHAR* pStreamConfigName);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IsInitialized
    ///
    /// @brief Initialized state
    ///
    /// @return Initialized state.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL IsInitialized()
    {
        return m_initialized;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetInputStreams
    ///
    /// @brief Return parsed input streams
    ///
    /// @return Point to parsed input stream array.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CHISTREAM* GetInputStreams()
    {
        return m_inputStreams;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetOutputStreams
    ///
    /// @brief Return parsed output streams
    ///
    /// @return Point to parsed output stream array.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CHISTREAM* GetOutputStreams()
    {
        return m_outputStreams;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetNumInputStreams
    ///
    /// @brief Return number of parsed input streams
    ///
    /// @return Number of parsed input streams.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetNumInputStreams()
    {
        return m_numInputStreams;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetNumOutputStreams
    ///
    /// @brief Return number of parsed output streams
    ///
    /// @return Number of parsed output streams.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetNumOutputStreams()
    {
        return m_numOutputStreams;
    }

private:
    StreamConfigParser(const StreamConfigParser&)             = delete;
    StreamConfigParser& operator= (const StreamConfigParser&) = delete;

    static BOOL                    m_initialized;

    static UINT                    m_numInputStreams;
    static CHISTREAM               m_inputStreams[MaxNumInputStreams];
    static UINT                    m_numOutputStreams;
    static CHISTREAM               m_outputStreams[MaxNumOutputStreams];

};

#endif // STREAMCONFIGPARSER_H
