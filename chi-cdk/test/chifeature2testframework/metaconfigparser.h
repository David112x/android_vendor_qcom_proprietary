////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  metaconfigparser.h
/// @brief Declarations of meta config xml parser.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef METACONFIGPARSER_H
#define METACONFIGPARSER_H

#include <stdint.h>
#include <string>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "xmlparser.h"
#include "chistatspropertydefines.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief Class containing functions to parse meta_config.xml
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MetaConfigParser
{
public:

     MetaConfigParser() = default;
    ~MetaConfigParser() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// MetaConfigXml
    ///
    /// @brief parse meta_config.xml file
    ///
    /// @param pMetaConfigName "\0" terminated meta_config.xml file path
    ///
    /// @return CDKResultSuccess for success, set error code if fail.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CDKResult ParseMetaConfigXml(const CHAR* pMetaConfigName);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IsInitialized
    ///
    /// @brief return initialized state
    ///
    /// @return initialized state.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL IsInitialized()
    {
        return m_initialized;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCT
    ///
    /// @brief return CCT
    ///
    /// @return CCT, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetCCT()
    {
        return m_CCT;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetLuxIdx
    ///
    /// @brief return LuxIdx
    ///
    /// @return LuxIdx, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetLuxIdx()
    {
        return m_LuxIdx;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetGain
    ///
    /// @brief return Gain
    ///
    /// @return Gain, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetGain()
    {
        return m_Gain;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetShortGain
    ///
    /// @brief return shortGain
    ///
    /// @return shortGain, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetShortGain()
    {
        return m_shortGain;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetDigitalGain
    ///
    /// @brief return digitalGain
    ///
    /// @return digitalGain, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetDigitalGain()
    {
        return m_digitalGain;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetExpSensitivityRatio
    ///
    /// @brief return ExpSensitivityRatio
    ///
    /// @return ExpSensitivityRatio, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetExpSensitivityRatio()
    {
        return m_ExpSensitivityRatio;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetExpTimeRatio
    ///
    /// @brief return ExpTimeRatio
    ///
    /// @return ExpTimeRatio, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetExpTimeRatio()
    {
        return m_ExpTimeRatio;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetExpGainRatio
    ///
    /// @brief return ExpGainRatio
    ///
    /// @return ExpGainRatio, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetExpGainRatio()
    {
        return m_ExpGainRatio;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetDrcGain
    ///
    /// @brief return DrcGain
    ///
    /// @return DrcGain, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetDrcGain()
    {
        return m_DrcGain;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetDrcGainDark
    ///
    /// @brief return DrcGainDark
    ///
    /// @return DrcGainDark, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetDrcGainDark()
    {
        return m_DrcGainDark;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetLensPosition
    ///
    /// @brief return LensPosition
    ///
    /// @return LensPosition, 0.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetLensPosition()
    {
        return m_LensPosition;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetHDRMode
    ///
    /// @brief return HDRMode
    ///
    /// @return HDRMode, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetHDRMode()
    {
        return m_HDRMode;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetGain_r
    ///
    /// @brief return gain_r
    ///
    /// @return gain_r, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetGain_r()
    {
        return m_gain_r;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetGain_g
    ///
    /// @brief return gain_g
    ///
    /// @return gain_g, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetGain_g()
    {
        return m_gain_g;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetGain_b
    ///
    /// @brief return gain_b
    ///
    /// @return gain_b, 1.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetGain_b()
    {
        return m_gain_b;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetHDRZrecSel
    ///
    /// @brief return HDRZrecSel
    ///
    /// @return HDRZrecSel, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetHDRZrecSel()
    {
        return m_HDRZrecSel;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetHDRZrecPattern
    ///
    /// @brief return HDRZrecPattern
    ///
    /// @return HDRZrecPattern, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetHDRZrecPattern()
    {
        return m_HDRZrecPattern;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetHDRZrecFirstRBExp
    ///
    /// @brief return HDRZrecFirstRBExp
    ///
    /// @return HDRZrecFirstRBExp, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetHDRZrecFirstRBExp()
    {
        return m_HDRZrecFirstRBExp;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetLEDSensitivity
    ///
    /// @brief return LEDSensitivity
    ///
    /// @return LEDSensitivity, 0.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetLEDSensitivity()
    {
        return m_LEDSensitivity;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetNumOfLed
    ///
    /// @brief return NumOfLed
    ///
    /// @return NumOfLed, 1 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetNumOfLed()
    {
        return m_NumOfLed;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetLed1IdxRatio
    ///
    /// @brief return Led1IdxRatio
    ///
    /// @return Led1IdxRatio, 0.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetLed1IdxRatio()
    {
        return m_Led1IdxRatio;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetLed2IdxRatio
    ///
    /// @brief return Led2IdxRatio
    ///
    /// @return Led2IdxRatio, 0.0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT GetLed2IdxRatio()
    {
        return m_Led2IdxRatio;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetSensorType
    ///
    /// @brief return SensorType
    ///
    /// @return SensorType, 1 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetSensorType()
    {
        return m_SensorType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetAecExpTimeShort
    ///
    /// @brief return aec_exp_time Short
    ///
    /// @return ec_exp_time Short, 1 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT64 GetAecExpTimeShort()
    {
        return m_AecExpTimeShort;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetAecExpTimeSafe
    ///
    /// @brief return aec_exp_time Safe
    ///
    /// @return aec_exp_time Safe, 1 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT64 GetAecExpTimeSafe()
    {
        return m_AecExpTimeSafe;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetAecExpTimeLong
    ///
    /// @brief return aec_exp_time Long
    ///
    /// @return aec_exp_time Long, 1 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT64 GetAecExpTimeLong()
    {
        return m_AecExpTimeLong;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMIFEFlag
    ///
    /// @brief return CCM IFE Flag
    ///
    /// @return CCM IFE Flag, FALSE for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL GetCCMIFEFlag()
    {
        return m_CCMIFEFlag;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMIFEMatrix
    ///
    /// @brief return CCM IFE Matrix
    ///
    /// @return CCM IFE Matrix, {0} for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT* GetCCMIFEMatrix()
    {
        return &m_CCMIFEMatrix[0][0];
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMIFEOffset
    ///
    /// @brief return CCM IFE Offset
    ///
    /// @return CCM IFE Offset, {0} for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT* GetCCMIFEOffset()
    {
        return &m_CCMIFEOffset[0];
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMBPSFlag
    ///
    /// @brief return CCM BPS Flag
    ///
    /// @return CCM BPS Flag, FALSE for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL GetCCMBPSFlag()
    {
        return m_CCMBPSFlag;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMBPSMatrix
    ///
    /// @brief return CCM BPS Matrix
    ///
    /// @return CCM BPS Matrix, {0} for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT* GetCCMBPSMatrix()
    {
        return &m_CCMBPSMatrix[0][0];
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMBPSOffset
    ///
    /// @brief return CCM BPS Offset
    ///
    /// @return CCM BPS Offset, {0} for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT* GetCCMBPSOffset()
    {
        return &m_CCMBPSOffset[0];
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMIPEFlag
    ///
    /// @brief return CCM IPE Flag
    ///
    /// @return CCM IPE Flag, FALSE for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL GetCCMIPEFlag()
    {
        return m_CCMIPEFlag;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMIPEMatrix
    ///
    /// @brief return CCM IPE Matrix
    ///
    /// @return CCM IPE Matrix, {0} for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT* GetCCMIPEMatrix()
    {
        return &m_CCMIPEMatrix[0][0];
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCCMIPEOffset
    ///
    /// @brief return CCM IPE Offset
    ///
    /// @return CCM IPE Offset, {0} for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FLOAT* GetCCMIPEOffset()
    {
        return &m_CCMIPEOffset[0];
    }

private:
    /// Do not allow the copy constructor or assignment operator
    MetaConfigParser(const MetaConfigParser&) = delete;
    MetaConfigParser& operator= (const MetaConfigParser&) = delete;

    static BOOL                    m_initialized;

    static UINT                    m_CCT;
    static FLOAT                   m_LuxIdx;
    static FLOAT                   m_Gain;
    static FLOAT                   m_shortGain;
    static FLOAT                   m_digitalGain;
    static FLOAT                   m_ExpSensitivityRatio;
    static FLOAT                   m_ExpTimeRatio;
    static FLOAT                   m_ExpGainRatio;
    static FLOAT                   m_DrcGain;
    static FLOAT                   m_DrcGainDark;
    static FLOAT                   m_LensPosition;
    static UINT                    m_HDRMode;
    static FLOAT                   m_gain_r;
    static FLOAT                   m_gain_g;
    static FLOAT                   m_gain_b;
    static UINT                    m_HDRZrecSel;
    static UINT                    m_HDRZrecPattern;
    static UINT                    m_HDRZrecFirstRBExp;
    static FLOAT                   m_LEDSensitivity;
    static UINT                    m_NumOfLed;
    static FLOAT                   m_Led1IdxRatio;
    static FLOAT                   m_Led2IdxRatio;
    static UINT                    m_SensorType;
    static UINT64                  m_AecExpTimeShort;
    static UINT64                  m_AecExpTimeSafe;
    static UINT64                  m_AecExpTimeLong;
    static BOOL                    m_CCMIFEFlag;
    static FLOAT                   m_CCMIFEMatrix[AWBNumCCMRows][AWBNumCCMCols];
    static FLOAT                   m_CCMIFEOffset[AWBNumCCMRows];
    static BOOL                    m_CCMBPSFlag;
    static FLOAT                   m_CCMBPSMatrix[AWBNumCCMRows][AWBNumCCMCols];
    static FLOAT                   m_CCMBPSOffset[AWBNumCCMRows];
    static BOOL                    m_CCMIPEFlag;
    static FLOAT                   m_CCMIPEMatrix[AWBNumCCMRows][AWBNumCCMCols];
    static FLOAT                   m_CCMIPEOffset[AWBNumCCMRows];
};

#endif // SPECTRACONFIGPARSER_H
