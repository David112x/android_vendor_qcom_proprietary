////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019-2020 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  spectraconfigparser.h
/// @brief Declarations of spectra sim config xml parser.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef SPECTRACONFIGPARSER_H
#define SPECTRACONFIGPARSER_H

#include <stdint.h>
#include <string>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "xmlparser.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief Class containing functions to parse spectrasimcam_config.xml
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class SpectraConfigParser
{
public:

     SpectraConfigParser() = default;
    ~SpectraConfigParser() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ParseSpectraConfigXml
    ///
    /// @brief parse spectrasimcam_config.xml file
    ///
    /// @param pSpectraConfigName "\0" terminated spectrasimcam_config.xml file path
    ///
    /// @return CDKResultSuccess for success, set error code if fail.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CDKResult ParseSpectraConfigXml(const CHAR* pSpectraConfigName);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetFeatureName
    ///
    /// @brief return feature name
    ///
    /// @return feature name as std::string
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static std::string GetFeatureName()
    {
        return m_featureName;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetTuningMode
    ///
    /// @brief return the tuning mode
    ///
    /// @return struct of ChiTuningModeParameter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static ChiTuningModeParameter GetTuningMode()
    {
        return m_tuningMode;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetFrameCount
    ///
    /// @brief return frame count for multi frame features
    ///
    /// @return number of frames, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetFrameCount()
    {
        return m_frameCount;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetUsecase
    ///
    /// @brief return usecase mode
    ///
    /// @return usecase mode, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetUsecase()
    {
        return m_usecase;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetSubModeValue0
    ///
    /// @brief return SubModeValue0
    ///
    /// @return SubModeValue0, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetSubModeValue0()
    {
        return m_subModeValue0;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetSubModeValue1
    ///
    /// @brief return SubModeValue1
    ///
    /// @return SubModeValue1, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetSubModeValue1()
    {
        return m_subModeValue1;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModeUsecaseSubModeType
    ///
    /// @brief return ModeUsecaseSubModeType
    ///
    /// @return ModeUsecaseSubModeType, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetModeUsecaseSubModeType()
    {
        return m_modeUsecaseSubModeType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModeFeature1SubModeType
    ///
    /// @brief return ModeFeature1SubModeType
    ///
    /// @return ModeFeature1SubModeType, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetModeFeature1SubModeType()
    {
        return m_modeFeature1SubModeType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModeFeature2SubModeType
    ///
    /// @brief return ModeFeature2SubModeType
    ///
    /// @return ModeFeature2SubModeType, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetModeFeature2SubModeType()
    {
        return m_modeFeature2SubModeType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModeSceneSubModeType
    ///
    /// @brief return ModeSceneSubModeType
    ///
    /// @return ModeSceneSubModeType, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetModeSceneSubModeType()
    {
        return m_modeSceneSubModeType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModeEffectSubModeType
    ///
    /// @brief return ModeEffectSubModeType
    ///
    /// @return ModeEffectSubModeType, 0 for not available in config xml file
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetModeEffectSubModeType()
    {
        return m_modeEffectSubModeType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetMetaConfigName
    ///
    /// @brief return meta config xml file name
    ///
    /// @return feature name as std::string
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static std::string GetMetaConfigName()
    {
        return m_metaConfigName;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetStreamConfigName
    ///
    /// @brief return stream config xml file name
    ///
    /// @return feature name as std::string
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static std::string GetStreamConfigName()
    {
        return m_streamConfigName;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetSensorID
    ///
    /// @brief return physical sensor ID
    ///
    /// @return feature name as std::string
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetSensorID()
    {
        return m_SensorID;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetStartFrameIndex
    ///
    /// @brief return start frame index
    ///
    /// @return UINT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT GetStartFrameIndex()
    {
        return m_StartFrameIndex;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetImageFileName
    ///
    /// @brief return image file name
    ///
    /// @return image file name as std::string
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static std::string GetImageFileName()
    {
        return m_imageFileName;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetOutputFileNamePrefix
    ///
    /// @brief return output file name prefix
    ///
    /// @return prefix to be added to the output file name
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static std::string GetOutputFileNamePrefix()
    {
        return m_outputFileNamePrefix;
    }

private:
    /// Do not allow the copy constructor or assignment operator
    SpectraConfigParser(const SpectraConfigParser&) = delete;
    SpectraConfigParser& operator= (const SpectraConfigParser&) = delete;

    static BOOL                   m_initialized;
    static std::string            m_featureName;
    static UINT                   m_frameCount;
    static std::string            m_imageFileName;
    static std::string            m_outputFileNamePrefix;
    static ChiTuningModeParameter m_tuningMode;

    static UINT                   m_usecase;

    static UINT                   m_subModeValue0;
    static UINT                   m_subModeValue1;
    static UINT                   m_modeUsecaseSubModeType;
    static UINT                   m_modeFeature1SubModeType;
    static UINT                   m_modeFeature2SubModeType;
    static UINT                   m_modeSceneSubModeType;
    static UINT                   m_modeEffectSubModeType;

    static std::string            m_metaConfigName;
    static std::string            m_streamConfigName;
    static UINT                   m_SensorID;
    static UINT                   m_StartFrameIndex;
};

#endif // SPECTRACONFIGPARSER_H
