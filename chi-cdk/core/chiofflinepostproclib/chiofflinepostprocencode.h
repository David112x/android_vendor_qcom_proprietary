////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019-2020 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  chiofflinepostprocencode.h
/// @brief Generic encode functions are handled in this header file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CHIOFFLINEPOSTPROCENCODE_H
#define CHIOFFLINEPOSTPROCENCODE_H

#include "camxcdktypes.h"
#include "chicommon.h"
#include "chifeature2types.h"
#include "chifeature2base.h"
#include "chifeature2requestobject.h"

static const UINT32 DefaultNumMetadataBuffers = 16;     ///< Default number of metadata buffers

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Base Class for chifeature2 to do post-proc encoder
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ChiOfflinePostprocEncode
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Setup
    ///
    /// @brief  Function to setup all the parameters for instance
    ///
    ///
    /// @return CDKResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult Setup();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Teardown
    ///
    /// @brief  Function to destroy the all the parameters before deleting instance
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID Teardown();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ProcessMessage
    ///
    /// @brief  Feature base class calls this method so that the test may process a message.
    ///
    /// @param  pFeatureRequestObj  Feature request object containing context
    /// @param  pMessages           The message to process
    ///
    /// @return CDKResultSuccess if successful; error code otherwise
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CDKResult ProcessMessage(
        ChiFeature2RequestObject*   pFeatureRequestObj,
        ChiFeature2Messages*        pMessages);

protected:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DoEncode
    ///
    /// @brief  API to encode the input bit-stream
    ///
    ///
    /// @return CDKResultSuccess if successful; error code otherwise
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult DoEncode();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OutputImageReceived
    ///
    /// @brief  Function to provide notification about output image received
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID OutputImageReceived();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DestroyFeature2Object
    ///
    /// @brief  Function to destroy the feature object
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DestroyFeature2Object();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FillDefaultMetadata
    ///
    /// @brief  Function to fill default metadata
    ///
    /// @param  pMetaData   Pointer to ChiMetadata
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID FillDefaultMetadata(
        ChiMetadata* pMetaData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UpdateDebugMetadata
    ///
    /// @brief  Function to update Debug Metadata
    ///
    /// @param  pMetaData   Pointer to ChiMetadata
    ///
    /// @return CDKResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult UpdateDebugMetadata(
        ChiMetadata* pMetaData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FreeCameraMetadata
    ///
    /// @brief  Function to free camera metadata
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID FreeCameraMetadata();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ProcessVendorDebugMetadata
    ///
    /// @brief  Function to check if Vendor specific Debug Data is present or not. This function is expected to be updated
    ///         by Vendor to convert OEM speicifc Metadata tags to QC Specific DebugDataTag
    ///
    /// @param  pMetaData   Pointer to ChiMetadata
    ///
    /// @return CDKResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult ProcessVendorDebugMetadata(
        ChiMetadata* pMetaData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetMetadataClientId
    ///
    /// @brief  Function to provide metadata client it
    ///
    ///
    /// @return ClientId
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE UINT32 GetMetadataClientId() const
    {
        return m_genericMetadataClientId;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetMetadataManager
    ///
    /// @brief  Function to provide metadata manager pointer
    ///
    ///
    /// @return ChiMetadataManager Pointer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE ChiMetadataManager* GetMetadataManager() const
    {
        return m_pMetadataManager;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetFrameNumber
    ///
    /// @brief  Function to get the frame number
    ///
    ///
    /// @return UINT32
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE UINT32 GetFrameNumber()
    {
        return m_frameNumber;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetThreadManager
    ///
    /// @brief  Function to provide thread manager pointer
    ///
    ///
    /// @return CHIThreadManager Pointer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE CHIThreadManager* GetThreadManager() const
    {
        return m_pThreadManager;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetBasePtr
    ///
    /// @brief  Function to get Feature2base object pointer
    ///
    ///
    /// @return ChiFeature2Base Pointer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE ChiFeature2Base* GetBasePtr()
    {
        return m_pFeature2Base;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetRequestObject
    ///
    /// @brief  Function to get Feature2Request object pointer
    ///
    ///
    /// @return ChiFeature2RequestObject Pointer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE ChiFeature2RequestObject* GetRequestObject()
    {
        return m_pFeature2RequestObject;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ReleasePipeline
    ///
    /// @brief  Function to release the resources related pipeline
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID ReleasePipeline();

    UINT32                  m_frameNumber;              ///< current Frame number
    CHIFENCEOPS             m_fenceOps;                 ///< chi fence operations
    CHICONTEXTOPS           m_chiOps;                   ///< chi general functions
    CHIMETADATAOPS          m_metadataOps;              ///< chi metadata functions
    UINT32                  m_genericMetadataClientId;  ///< client id returned while creating metadata manager
    ChiMetadataManager*     m_pMetadataManager;         ///< metadata manager for metadata operations
    camera_metadata_t*      m_pCameraMetadata;          ///< Camera metadata
    UINT32                  m_debugDataSize;            ///< Debug Data size
    UCHAR*                  m_pDebugDataPtr;            ///< Debug metadata pointer
    UINT                    m_selectCam;                ///< Default Camera Id
    UINT                    m_sensorSubModeValue;       ///< Sensor Sub Mode value

    ChiOfflinePostprocEncode()              = default;
    virtual ~ChiOfflinePostprocEncode()     = default;

private:

    ChiOfflinePostprocEncode(const ChiOfflinePostprocEncode& rOther)                = delete;
    ChiOfflinePostprocEncode(const ChiOfflinePostprocEncode&& rrOther)              = delete;
    ChiOfflinePostprocEncode& operator=(const ChiOfflinePostprocEncode& rOther)     = delete;
    ChiOfflinePostprocEncode& operator=(const ChiOfflinePostprocEncode&& rrOther)   = delete;

    Mutex*                      m_pFeature2ObjectMutex;             ///< Mutex to protect Feature2 Object access
    Mutex*                      m_pFeature2RequestStateMutex;       ///< Mutex to protect Feature2 Statue access
    Condition*                  m_pFeature2RequestStateComplete;    ///< Condition to indicate encode completed
    ChiFeature2RequestObject*   m_pFeature2RequestObject;           ///< Feature2Req object pointer
    camera_info_t               m_cameraInfo;                       ///< Camera info
    CHIThreadManager*           m_pThreadManager;                   ///< thread manager
    ChiFeature2CreateInputInfo  m_CreateInputInfo;                  ///< Create Info structure
    ChiFeature2Base*            m_pFeature2Base;                    ///< Feature2Base class ptr

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// InitializeTargetBufferManagers
    ///
    /// @brief  Function to initialize feature2 parameters
    ///
    ///
    /// @return CDKResultSuccess if success or appropriate error code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult InitializeTargetBufferManagers() = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetInputFeature2RequestObject
    ///
    /// @brief  Function to create Feature2 Request object
    ///
    /// @param  pFeature2Base               Pointer to Feature2Base class
    /// @param  pMetadata                   Pointer to Metadata
    /// @param  ppFeature2RequestObjectOut  Double Pointer to Feature2 Req Object
    /// @param  pPrivateData                Private data provided Feature2Req Object
    ///
    /// @return CDKResultSuccess or appropriate error code
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult GetInputFeature2RequestObject(
        ChiFeature2Base*            pFeature2Base,
        ChiMetadata*                pMetadata,
        ChiFeature2RequestObject**  ppFeature2RequestObjectOut,
        VOID*                       pPrivateData) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetGenericFeature2Descriptor
    ///
    /// @brief  Function to update Input Info structure
    ///
    /// @param  pFeature2CreateInputInfoOut  Pointer to Input Info structure
    ///
    /// @return CDKResultSuccess if success or appropriate error code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult GetGenericFeature2Descriptor(
        ChiFeature2CreateInputInfo* pFeature2CreateInputInfoOut) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateFeature2
    ///
    /// @brief  Function to create Feature2Base class
    ///
    /// @param  pFeature2CreateInputInfo    Pointer to Feature2 Create Info
    ///
    /// @return Feature2Base class pointer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ChiFeature2Base* CreateFeature2(
        ChiFeature2CreateInputInfo* pFeature2CreateInputInfo) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ProcessFeature2Message
    ///
    /// @brief  Static ProcessMessage function will call this virtual function to process the response
    ///
    /// @param  pFeatureRequestObj  Feature request object containing context
    /// @param  pMessages           The message to process
    ///
    /// @return CDKResultSuccess if successful; error code otherwise
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CDKResult ProcessFeature2Message(
        ChiFeature2RequestObject*   pFeatureRequestObj,
        ChiFeature2Messages*        pMessages) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateMetadataManager
    ///
    /// @brief  create metadata manager for metadata operations
    ///
    ///
    /// @return CDKResult enum
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult CreateMetadataManager();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetupCamera
    ///
    /// @brief  Function to instantiate Camera
    ///
    ///
    /// @return CDKResult enum
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult SetupCamera();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LoadChiOps
    ///
    /// @brief  Function to load Chi Feature2 libraries and update function pointers
    ///
    ///
    /// @return CDKResult enum
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CDKResult LoadChiOps();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UnlockFeature2Object
    ///
    /// @brief  Function to unlock the mutex
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE VOID UnlockFeature2Object()
    {
        m_pFeature2ObjectMutex->Unlock();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LockFeature2Object
    ///
    /// @brief  Function to lock the mutex
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHX_INLINE VOID LockFeature2Object()
    {
        m_pFeature2ObjectMutex->Lock();
    }

};

#endif // CHIOFFLINEPOSTPROCENCODE_H
