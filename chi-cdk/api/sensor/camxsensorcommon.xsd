<?xml version="1.0" encoding="UTF-8"?>
<!--========================================================================-->
<!-- Copyright (c) 2016-2017 Qualcomm Technologies, Inc.                    -->
<!-- All Rights Reserved.                                                   -->
<!-- Confidential and Proprietary - Qualcomm Technologies, Inc.             -->
<!--========================================================================-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:simpleType name="I2CFrequencyMode">
        <xs:annotation>
            <xs:documentation>I2C frequency mode of slave</xs:documentation>
            <xs:documentation>Supported modes are: STANDARD (100 KHz), FAST (400 KHz), FAST_PLUS (1 MHz), CUSTOM (Custom frequency in DTSI)</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="STANDARD"/>
            <xs:enumeration value="FAST"/>
            <xs:enumeration value="CUSTOM"/>
            <xs:enumeration value="FAST_PLUS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="I2CRegAddrDataType">
        <xs:annotation>
            <xs:documentation>Register address / data size in bytes</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:unsignedInt">
                <xs:attribute name="range" type="xs:string" default="[1,4]"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="OperationType">
        <xs:annotation>
            <xs:documentation>Type of I2C operation</xs:documentation>
            <xs:documentation>Valid values are: WRITE, WRITE_BURST, WRITE_SEQUENTIAL, READ, POLL</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="WRITE"/>
            <xs:enumeration value="WRITE_BURST"/>
            <xs:enumeration value="WRITE_SEQUENTIAL"/>
            <xs:enumeration value="READ"/>
            <xs:enumeration value="POLL"/>
            <xs:enumeration value="MAX"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="RegisterData">
        <xs:annotation>
            <xs:documentation>Data that is associated with registerAddr</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:unsignedInt"/>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="RegisterDataList">
        <xs:annotation>
            <xs:documentation>List of data items in bytes seperated by space as delimiter.</xs:documentation>
            <xs:documentation>Data may be written to an I2C slave in burst mode.</xs:documentation>
        </xs:annotation>
      <xs:list itemType="RegisterData"/>
    </xs:simpleType>

    <xs:complexType name="RegisterSetting">
        <xs:annotation>
            <xs:documentation>Register setting configuration</xs:documentation>
            <xs:documentation>Contains: register address, register data, register address type, register data type,</xs:documentation>
            <xs:documentation>operation and delay in micro seconds</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <!-- element for slaveAddr -->
            <xs:element name="slaveAddr" type="xs:unsignedShort" default="0" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Slave address to communicate with the device</xs:documentation>
                </xs:annotation>
            </xs:element>

            <!-- element for registerAddr -->
            <xs:element name="registerAddr" type="xs:unsignedInt">
                <xs:annotation>
                    <xs:documentation>Register address that is accessed</xs:documentation>
                </xs:annotation>
            </xs:element>

            <!-- element for registerData -->
            <xs:element name="registerData" type="RegisterDataList">
                <xs:annotation>
                    <xs:documentation>If operation is WRITE, a single registerData item is to be written into location specified by registerAddr.</xs:documentation>
                    <xs:documentation>For operation WRITE_BURST, a list of 1 or more registerData items will be written serially starting</xs:documentation>
                    <xs:documentation>at the location specified by registerAddr, and the I2C slave will internally increment the address for each</xs:documentation>
                    <xs:documentation>registerData item.</xs:documentation>
                    <xs:documentation>For operation WRITE_SEQUENTIAL, a list of 1 or more registerData items will be written serially starting</xs:documentation>
                    <xs:documentation>at the location specified by registerAddr, but the address is explicitly generated by the driver for each</xs:documentation>
                    <xs:documentation>registerData item in the list.</xs:documentation>
                    <xs:documentation>If operation is READ, registerData is the number of bytes to be read from the specified register address</xs:documentation>
                </xs:annotation>
            </xs:element>

            <!-- element for regAddrType -->
            <xs:element name="regAddrType" type="I2CRegAddrDataType" />

            <!-- element for regDataType -->
            <xs:element name="regDataType" type="I2CRegAddrDataType" />

            <!-- element for operation -->
            <xs:element name="operation" type="OperationType" default="WRITE" />

            <!-- element for delayUs -->
            <xs:element name="delayUs" type="xs:unsignedInt" default="0" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Delay in micro seconds. Delay is 0 if not explicitly provided</xs:documentation>
                    <xs:documentation>For operation WRITE, the delay value is applied at the end of the single register data item.</xs:documentation>
                    <xs:documentation>For operation WRITE_BURST, WRITE_SEQUENTIAL, the delay value is applied at the end of the burst sequence.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="SettingsInfo">
        <xs:annotation>
            <xs:documentation>Sequence of register settings to configure the device</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="regSetting" type="RegisterSetting" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="PowerConfigurationType">
        <xs:annotation>
            <xs:documentation>Power configuration type</xs:documentation>
            <xs:documentation>Supported types are: MCLK, VANA, VDIG, VIO, VAF, RESET, STANDBY</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="MCLK"/>
            <xs:enumeration value="VANA"/>
            <xs:enumeration value="VDIG"/>
            <xs:enumeration value="VIO"/>
            <xs:enumeration value="VAF"/>
            <xs:enumeration value="VAF_PWDN"/>
            <xs:enumeration value="CUSTOM_REG1"/>
            <xs:enumeration value="CUSTOM_REG2"/>
            <xs:enumeration value="RESET"/>
            <xs:enumeration value="STANDBY"/>
            <xs:enumeration value="CUSTOM_GPIO1"/>
            <xs:enumeration value="CUSTOM_GPIO2"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="PowerSetting">
        <xs:annotation>
            <xs:documentation>Power setting configuration</xs:documentation>
            <xs:documentation>Contains: configType, configValue and delay in milli seconds</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="configType" type="PowerConfigurationType" />
            <xs:element name="configValue" type="xs:unsignedInt" default="0">
                <xs:annotation>
                    <xs:documentation>Configuration value for the type of configuration</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="delayMs" type="xs:unsignedInt" default="0">
                <xs:annotation>
                    <xs:documentation>Delay in milli seconds</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="PowerSequenceInfo">
        <xs:annotation>
            <xs:documentation>Sequence of power configuration type and configuration value required to control power to the device</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="powerSetting" type="PowerSetting" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="FrameDimension">
        <xs:annotation>
            <xs:documentation>Frame dimension: contains xStart, yStart, width and height</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="xStart" type="xs:unsignedInt" />
            <xs:element name="yStart" type="xs:unsignedInt" />
            <xs:element name="width" type="xs:unsignedInt" />
            <xs:element name="height" type="xs:unsignedInt" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Dimension">
        <xs:annotation>
            <xs:documentation>Width and height of the frame or subframe</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="width" type="xs:unsignedInt" />
            <xs:element name="height" type="xs:unsignedInt" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Position">
        <xs:annotation>
            <xs:documentation>Position information</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="x" type="xs:unsignedInt" />
            <xs:element name="y" type="xs:unsignedInt" />
        </xs:sequence>
    </xs:complexType>
</xs:schema>
