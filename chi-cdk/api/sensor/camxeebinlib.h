////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxeebinlib.h
/// @brief memory map information and common data structure
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXEEBINLIB_H
#define CAMXEEBINLIB_H

#include "camxcdktypes.h"

#ifdef __cplusplus
extern "C"
{
#endif // __cplusplus

static const CHAR*  XMLBinaryFileName   = "eebindriver.bin";
static const CHAR*  EEBinDataFileName   = "eebin.bin";
static const UINT32 HWVersionSize       = 5;
static const UINT32 SWVersionSize       = 4;
static const UINT32 MiscVersionSize     = 2;
static const UINT32 VersionSize         = HWVersionSize + SWVersionSize + MiscVersionSize + 1; ///< 1 NULL charecter
static const UINT32 MaximumModules      = 20;
static const UINT32 MaxModuleNameLength = 128;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// table entry for module header info
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EEbinModuleHeaderInfo
{
    CHAR    name[MaxModuleNameLength];  ///< name of module
    CHAR    version[VersionSize];       ///< Vesrion size of Module
    UINT32  crc_32;                     ///< checksum for module data
    UINT32  isCompressed;               ///< module data is compressed or not
    UINT32  size;                       ///< data size
    UINT32  offset;                     ///< Offset in the OTP data
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// table entry for master header info
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EEbinHeaderInfo
{
    UINT32 crc_32;                  ///< checksum for whole binary
    CHAR   version[VersionSize];    ///< fw version of eebin data
    UINT32 numberOfModules;         ///< Number of modules
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// table entry for master header and all the module header info
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EEbinModuleData
{
    EEbinHeaderInfo masterHeaderData;                        ///< master header
    EEbinModuleHeaderInfo moduleHeaderInfo[MaximumModules];  ///< modules header
};

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // CAMXEEBINLIB_H
