ifeq ($(CAMX_CHICDK_PATH),)
  LOCAL_PATH            := $(abspath $(call my-dir)/../..)
  CAMX_CHICDK_PATH      := $(abspath $(LOCAL_PATH)/../..)
else
  LOCAL_PATH            := $(CAMX_CHICDK_API_PATH)/generated
endif
CAMX_CURDIR             := $(call my-dir)

include $(CLEAR_VARS)

# Binary name
LOCAL_MODULE := libcamxgenerated
LOCAL_MODULE_CLASS := STATIC_LIBRARIES

# Get definitions common to the CAMX project here
include $(CAMX_CHICDK_PATH)/core/build/android/common.mk

# The following command call the buildbins.py to to generate makefiles and code.
# This task should be done before compiling the source code.
ifeq ($(CAMX_PYTHON),)
CAMX_PYTHON         := $(abspath prebuilts/python/linux-x86/2.7.5/bin/python)
endif
CAMX_BUILDBINS_SCRIPT := $(CAMX_CHICDK_PATH)/tools/buildbins/buildbins.py

ifeq ($(CAMX_EXT_VBUILD),)
CAMX_GEN_DIR := $(call local-generated-sources-dir)/generated
else
CAMX_GEN_DIR := $(CAMX_CHICDK_API_PATH)/generated
endif

CAMX_GEN_MK_DIR := $(CAMX_GEN_DIR)
$(info Generating camx supplementary makefiles.)
CAMX_SUCCESS_PHRASE   := ZFCJDBJGVW
CAMX_GEN_MAKEFILE     := $(CAMX_PYTHON) $(CAMX_BUILDBINS_SCRIPT) \
                         --target=code \
                         --gen-code-dir=$(CAMX_GEN_DIR)
CAMX_BUILD_OUTPUT     := $(shell $(CAMX_GEN_MAKEFILE) && echo $(CAMX_SUCCESS_PHRASE))

# Show the output to the screen
CAMX_BUILD_OUTPUT_1   := $(subst $(CAMX_SUCCESS_PHRASE),,$(CAMX_BUILD_OUTPUT))
$(info $(CAMX_BUILD_OUTPUT_1))

# Something is wrong if the last word in the outputs is not the CAMX_SUCCESS_PHRASE.
ifneq ($(CAMX_SUCCESS_PHRASE),$(lastword $(CAMX_BUILD_OUTPUT)))
  $(error Cannot generate supplementary makefiles)
endif
# End of buildbins.py call

# Include makefiles which are generated by the parser
include $(CAMX_GEN_MK_DIR)/g_fd.mk
include $(CAMX_GEN_MK_DIR)/g_sensor.mk
include $(CAMX_GEN_MK_DIR)/g_chromatix.mk
include $(CAMX_GEN_MK_DIR)/g_parser.mk

CAMX_GEN_INC_FILES :=                           \
    $(CAMX_FACEDETECTION_INC_FILES)             \
    $(CAMX_PARSER_INC_FILES)                    \
    $(CAMX_SENSOR_INC_FILES)                    \
    $(CAMX_CHROMATIX_INC_FILES)

CAMX_GEN_SRC_FILES :=                           \
    $(CAMX_FACEDETECTION_SRC_FILES)             \
    $(CAMX_PARSER_SRC_FILES)                    \
    $(CAMX_SENSOR_SRC_FILES)                    \
    $(CAMX_CHROMATIX_SRC_FILES)

# Put here any libraries that should be linked by CAMX projects
LOCAL_C_LIBS := $(CAMX_C_LIBS)

# Paths to included headers
LOCAL_C_INCLUDES :=                             \
    $(CAMX_C_INCLUDES)                          \
    $(CAMX_GEN_DIR)/g_parser                    \
    $(CAMX_GEN_DIR)/g_facedetection             \
    $(CAMX_GEN_DIR)/g_sensor                    \
    $(CAMX_GEN_DIR)/g_chromatix

LOCAL_EXPORT_C_INCLUDE_DIRS :=                  \
    $(CAMX_GEN_DIR)/g_parser                    \
    $(CAMX_GEN_DIR)/g_facedetection             \
    $(CAMX_GEN_DIR)/g_sensor                    \
    $(CAMX_GEN_DIR)/g_chromatix

# Compiler flags
LOCAL_CFLAGS := $(CAMX_CFLAGS)                  \
    -Wno-uninitialized                          \
    -Wno-unused-parameter                       \
    -Wno-unused-variable

LOCAL_CPPFLAGS := $(CAMX_CPPFLAGS)

LOCAL_LDFLAGS :=
LOCAL_LDLIBS :=

ifeq ($(CAMX_EXT_VBUILD),)
  # set LOCAL_GENERATED_SOURCES for the non-VGDB build
  LOCAL_GENERATED_SOURCES := $(addprefix $(CAMX_GEN_DIR)/,$(CAMX_GEN_SRC_FILES))
  LOCAL_REQUIRED_MODULES  := camx_buildbins
else
  # set LOCAL_SRC/INC_FILES for the VGDB build
  LOCAL_INC_FILES := $(CAMX_GEN_INC_FILES)
  LOCAL_SRC_FILES := $(CAMX_GEN_SRC_FILES)
endif

include $(BUILD_STATIC_LIBRARY)

# The following section call the buildbins.py to build binaries.
ifeq ($(CAMX_EXT_VBUILD),)
CAMX_BIN_OUTPUT_LOC   := ./$(TARGET_OUT_VENDOR)/lib/camera,./$(TARGET_OUT_VENDOR)/lib64/camera
else
CAMX_BIN_OUTPUT_LOC   := $(CAMX_CHICDK_PATH)/oem/qcom/bin
endif

CAMX_BUILD_CODE_BIN   := $(CAMX_PYTHON) $(CAMX_BUILDBINS_SCRIPT) \
                         --bin-path=$(CAMX_BIN_OUTPUT_LOC) --target=bin \
                         --yaml-file-name=buildbins_$(TARGET_BOARD_PLATFORM).yaml

ifeq ($(CAMX_EXT_VBUILD),)
  # Call the buildbins.py via the LOCAL_POST_INSTALL_CMD hook after copying and removing
  # a dummy file in non-VGDB environment.
  include $(CLEAR_VARS)
  LOCAL_MODULE           := camx_buildbins
  LOCAL_MODULE_OWNER     := qti
  LOCAL_MODULE_TAGS      := optional
  LOCAL_MODULE_CLASS     := DATA
  LOCAL_SRC_FILES        := .tmp
  LOCAL_MODULE_PATH      := $(TARGET_OUT_VENDOR)/lib64/camera
  LOCAL_POST_INSTALL_CMD := rm -f $(LOCAL_MODULE_PATH)/$(LOCAL_MODULE) && \
                            $(CAMX_BUILD_CODE_BIN)
  include $(BUILD_PREBUILT)
else
  # Call the buildbins.py while parsing the makefiles in VGDB environment.
  CAMX_BUILD_OUTPUT     := $(shell $(CAMX_BUILD_CODE_BIN) && echo $(CAMX_SUCCESS_PHRASE))
  # Show the output to the screen
  CAMX_BUILD_OUTPUT_1   := $(subst $(CAMX_SUCCESS_PHRASE),,$(CAMX_BUILD_OUTPUT))
  $(info $(CAMX_BUILD_OUTPUT_1))

  # Something is wrong if the last word in the outputs is not the CAMX_SUCCESS_PHRASE.
  ifneq ($(CAMX_SUCCESS_PHRASE),$(lastword $(CAMX_BUILD_OUTPUT)))
    $(error Cannot generate supplementary makefiles)
  endif
endif
# End of buildbins.py call

# set the LOCAL_* variables for the VS project
LOCAL_MODULE    := libcamxgenerated
LOCAL_INC_FILES := $(CAMX_GEN_INC_FILES)
LOCAL_SRC_FILES := $(CAMX_GEN_SRC_FILES)
