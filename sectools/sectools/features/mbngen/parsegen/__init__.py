# ===============================================================================
#
#  Copyright (c) 2013-2017 Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# ===============================================================================

"""Parses the config file specific to mbngen. Provides all the
functionalities from :mod:`sectools.common.utils.c_config`. Once the config is parsed,
a tree representation of the object is created.
"""

import __secfile__
__secfile__.init()

import os
import re

import defines as defines

from sectools.common.utils import c_config, c_path
from sectools.common.utils.c_logging import logger
from sectools.common.utils.c_misc import get_dups_in_list

def config_path():
    """Returns mbngen config path found in the config dir matching the naming conventions.
       If config file is not found in the dir, its value is returned as None.
    """
    config_dir = defines.DEFAULT_MBNGEN_CONFIG_DIR
    mbngenconfig = None
    for entry in os.listdir(config_dir):
        path = defines.c_path.join(config_dir, entry)
        if entry.endswith(defines.MBNGEN_XML_NAME_ENDING):
            mbngenconfig = path

    if mbngenconfig is None:
        raise RuntimeError('Could not found out the mbngen config file in: ' + config_dir)

    return mbngenconfig

def config(path):
    """(obj) object of :class:`ConfigParser` generated by loading the config file in the config_dir.
    """
    try:
        config = ConfigParser(path)
    except Exception as e:
        logger.warning('Failed to load config: ' + path + '\n'
                       '    ' + 'Error: ' + str(e))
    return config

class ConfigParser(c_config.CoreConfig):
    """Parses the MBNGEN configuration file using c_config.CoreConfig and
    the module auto-generated using generateDS (auto_gen_xml_config).

    :param str config_path: Path to the config file to be parsed.

    .. data: root

        Root class representing the structure of the config file.

    .. data:: __version__ = 1.0

        Version of the Config Parser

    """

    __version__ = '1.0'

    def __init__(self, config_path, overrides=None):
        """Initializations and checks"""
        import auto_gen_xml_config, auto_gen_obj_config

        assert isinstance(config_path, str)
        self.config_module = auto_gen_xml_config
        self.obj_module = auto_gen_obj_config
        self.overrides = overrides
        c_config.CoreConfig.__init__(self, self.config_module, config_path)

        if self.overrides is not None:
            for tag, override in self.overrides.get_properties(has_value=True).items():
                setattr(self.config_data.general_properties, tag, override.value)

        self.validate()

    def validate(self):
        """Normalizes and validates the data in the mbngen xml.

        :raises: RuntimeError if config is determined to be invalid
        """
        c_config.CoreConfig.validate(self, defines.CONFIG_STRUCTURE)

        # Check that the version matches
        config_version = self.version
        if config_version != self.__version__:
            raise RuntimeError('Version of parser: "' + self.__version__ + '" does not match version from config "' + config_version + '"')

    def generate(self, file_path):
        """Generates the mbngen config file with the current configuration
        of the root node.

        :param str file_path: path to the config file that should be generated
            with the current data
        """
        logger.debug('Generating config file...')
        c_config.CoreConfig.generate(self, file_path,
                                     defines.XML_ROOTNODE,
                                     defines.XML_NAMESPACE,
                                     defines.XML_PREPEND_LINES)
        logger.debug('Generated config file at: ' + str(file_path))

    def transfer_from_obj(self, obj):
        """Updates the values of the config root node using the attributes of
        the object provided.

        :param Cfg_Mbngen obj: Object to be used for obtaining the values.
        """
        assert isinstance(obj, self.obj_module.Cfg_Mbngen)
        logger.debug('Updating config contents using object: ' + obj)
        self.root = self.transfer_from_obj_to_node(obj,
                                                   self.root,
                                                   defines.CONFIG_STRUCTURE,
                                                   defines.ROOTNODE_NAME)
        logger.debug('Config contents updated.')

    def transfer_to_obj(self, obj):
        """Updates the attributes of the object provided using the values of the
        root config node.

        :params: same as :meth:`transfer_from_obj`
        """
        assert isinstance(obj, self.obj_module.Cfg_Mbngen)
        logger.debug('Updating object using config contents: ' + obj)
        obj = self.transfer_from_node_to_obj(self.root,
                                             obj,
                                             defines.CONFIG_STRUCTURE,
                                             defines.ROOTNODE_NAME,)
        logger.debug('Object updated using the config.')

    def transfer_from_obj_to_node(self, obj, node, structure, structure_parent):
        return self.transfer(obj,
                             node,
                             structure,
                             structure_parent,
                             self.config_module,
                             defines.XML_CLASSNAME_GEN)

    def transfer_from_node_to_obj(self, node, obj, structure, structure_parent):
        return self.transfer(node,
                             obj,
                             structure,
                             structure_parent,
                             self.obj_module,
                             defines.OBJ_CLASSNAME_GEN)

    @property
    def version(self):
        """
        :returns: Version of the config file.
        :rtype: str
        """
        return self.root.metadata.version

    @property
    def config_data(self):
        """
        :returns: Config object
        :rtype: obj
        """
        return self.root



#------------------------------------------------------------------------------
# Restrict all import
#------------------------------------------------------------------------------
__all__ = ['ConfigDir',
           'ConfigParser',
           'defines',
           'auto_gen_obj_config']
