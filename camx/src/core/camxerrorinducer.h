////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2016, 2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxerrorinducer.h
/// @brief Declarations for the ContingencyInducer class.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXERRORINDUCER_H
#define CAMXERRORINDUCER_H

#include "camxdefs.h"
#include "chinode.h"

CAMX_NAMESPACE_BEGIN

/// @brief inducer return flags
enum class FenceDropActionReturnType
{
    ACTION_DROP  = 0,  ///< return as fence drop
    ACTION_NONE  = 1,  ///< return as non action
    ACTION_ERROR = 2   ///< return as fence mark as error
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class that implements the inducer.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ContingencyInducer
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ContingencyInducer
    ///
    /// @brief  Constructor for ContingencyInducer object.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ContingencyInducer();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~ContingencyInducer
    ///
    /// @brief  Destructor for ContingencyInducer object.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~ContingencyInducer();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Initialize
    ///
    /// @brief  Method to initialize ContingencyInducer object.
    ///
    /// @param  pChiContext    ContingencyInducer Need ChiContext for configuration
    /// @param  pPipelineName  ContingencyInducer current pipeline name
    /// @param  pNodeName      ContingencyInducer current node name
    ///
    /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult Initialize(
        ChiContext* pChiContext,
        const CHAR* pPipelineName,
        const CHAR* pNodeName);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CheckFenceDropNeeded
    ///
    /// @brief  Method to check fence drop needed.
    ///
    /// @param  isRealTime Is Real Time Usecase
    /// @param  requestId  current requestId
    /// @param  portId     current portId
    ///
    /// @return FenceDropActionReturnType based on requestId and portId
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FenceDropActionReturnType CheckFenceDropNeeded(
        BOOL   isRealTime,
        UINT64 requestId,
        UINT   portId);

private:
    ContingencyInducer(const ContingencyInducer&)            = delete;       ///< Disallow the copy constructor
    ContingencyInducer& operator=(const ContingencyInducer&) = delete;       ///< Disallow assignment operator

    const CHAR* m_pCurrentPipelineName; ///< current pipeline name
    const CHAR* m_pCurrentNodeName;     ///< current camxnode name
    ChiContext* m_pChiContext;          ///< Chi Context pointer
};

CAMX_NAMESPACE_END

#endif // CAMXERRORINDUCER_H