////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file camxflashdata.h
/// @brief Flash data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXFLASHDATA_H
#define CAMXFLASHDATA_H

#include "camxcslsensordefs.h"
#include "camxdefs.h"
#include "camxflashdriver.h"
#include "camxhal3defs.h"
#include "camxsensorproperty.h"
#include "camxtypes.h"

CAMX_NAMESPACE_BEGIN

struct  HwSensorInfo;
struct  HwDeviceTypeInfo;

/// @brief FlashOperation
enum class FlashOperation
{
    Off,    ///< Flash off
    Low,    ///< Fash with low current. Used for Preflash, torch
    High,   ///< Fash with high current. Used fo main flash
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class containing flash APIs
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class FlashData
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FlashData
    ///
    /// @brief  Constructor
    ///
    /// @param  pFlashDriverData       Pointer to the flash driver data for this instance
    /// @param  pSensorInfoTable       slot of the Flash obtained through enumerate devices.
    /// @param  pDeviceInfo            device info containing device indicies of CSLDeviceTypeFlash
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    explicit FlashData(
        FlashDriverData*        pFlashDriverData,
        HwSensorInfo*           pSensorInfoTable,
        const HwDeviceTypeInfo* pDeviceInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~FlashData
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~FlashData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetDeviceIndex
    ///
    /// @brief  Get the flash device index
    ///
    /// @return device index
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 GetDeviceIndex()
    {
        return m_hFlashDeviceIndex;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetFlashType
    ///
    /// @brief  Get the flash driver type
    ///
    /// @return FlashDriverType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashDriverType GetFlashType()
    {
        return m_pFlashDriverData->flashDriverType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetPowerSequenceCmdSize
    ///
    /// @brief  Get size for power up/down command buffer
    ///
    /// @param  isPowerUp   Is it power up or power down
    ///
    /// @return Size of the command buffer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT GetPowerSequenceCmdSize(
        BOOL isPowerUp);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreatePowerSequenceCmd
    ///
    /// @brief  Create power sequence commands
    ///
    /// @param  isPowerUp   Is it power up or power down
    /// @param  pCmdBuffer  Power up/down command
    ///
    /// @return CamxResultSuccess, if SUCCESS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult CreatePowerSequenceCmd(
        BOOL    isPowerUp,
        VOID*   pCmdBuffer);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateI2CInfoCmd
    ///
    /// @brief  Create I2C Info command
    ///
    /// @param  pI2CInfoCmd I2CInfo command
    ///
    /// @return CamxResultSuccess, if SUCCESS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult CreateI2CInfoCmd(
        CSLSensorI2CInfo* pI2CInfoCmd);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetI2CInitializeCmdSize
    ///
    /// @brief  Get size for init command buffer
    ///
    /// @return Size of the command buffer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT GetI2CInitializeCmdSize();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetI2CFireCmdSize
    ///
    /// @brief  Get the command buffer size of the Flash Fire supported
    ///
    /// @param  operation  FlashOperation
    ///
    /// @return command size
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    UINT GetI2CFireCmdSize(
        FlashOperation operation);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetI2CFireMaxCmdSize
    ///
    /// @brief  Get the max command buffer size need to be allocated for OIS mode
    ///
    /// @return command size
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    UINT GetI2CFireMaxCmdSize();
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetOISLibrary
    ///
    /// @brief  Retrieve the ois library
    ///
    /// @return ois data object at index or NULL
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateI2CInitializeCmd
    ///
    /// @brief  Construct the flash init command
    ///
    /// @param  pCmdBuffer   I2C Initialize command to fill in
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult CreateI2CInitializeCmd(
        VOID* pCmdBuffer);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateI2CFireCmd
    ///
    /// @brief  Construct the flash init command
    ///
    /// @param  pCmdBuffer   I2C Fire command to fill in
    /// @param  operation    I2C Fire Flash Operation
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult CreateI2CFireCmd(
        VOID* pCmdBuffer,
        FlashOperation operation);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateInitializeCmd
    ///
    /// @brief  Construct the flash init command
    ///
    /// @param  pInitCmd   Initialize command to fill in
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID CreateInitializeCmd(
        CSLFlashInfoCmd* pInitCmd);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetNumberOfFlashs
    ///
    /// @brief  Get the number of Flashs
    ///
    /// @return Number of LEDs
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT16 GetNumberOfFlashs()
    {
        return m_pFlashDriverData->numberOfFlashs;
    }

private:
    FlashData(const FlashData&) = delete;               ///< Disallow the copy constructor
    FlashData& operator=(const FlashData&) = delete;    ///< Disallow assignment operator

    FlashDriverData* m_pFlashDriverData;                ///< Flash driver data
    INT32            m_hFlashDeviceIndex;               ///< Flash device handle
};

CAMX_NAMESPACE_END

#endif // CAMXFLASHDATA_H
