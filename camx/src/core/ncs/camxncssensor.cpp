////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxncssensor.cpp
/// @brief CamX NCS Sensor implementation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "camxdefs.h"
#include "camxincs.h"
#include "camxncsintfqsee.h"
#include "camxncssensordata.h"
#include "camxncssensor.h"
#include "camxncsservice.h"
#include "camxutils.h"

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetLastNSamples
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NCSSensorData* NCSSensor::GetLastNSamples(
    UINT numOfSamples)
{
    INCSIntfBase* pNCSIntfObject = m_NCSSensorContext.pNCSIntfObject;
    CAMX_ASSERT_MESSAGE(NULL != pNCSIntfObject, "NULL NCS interface object");
    return static_cast<NCSSensorData*>
        (pNCSIntfObject->GetLastNSamples(numOfSamples, m_NCSSensorContext.connIndex));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetDataSync
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NCSSensorData* NCSSensor::GetDataSync(
    UINT64 tStart,
    UINT64 tEnd)
{
    INCSIntfBase*  pNCSIntfObject = NULL;
    NCSSensorType  sensorType     = NCSMaxType;
    NCSSensorData* pNCSDataObj    = NULL;

    pNCSIntfObject = m_NCSSensorContext.pNCSIntfObject;
    sensorType = GetSensorType();
    CAMX_ASSERT_MESSAGE(((sensorType >= 0) && (sensorType < NCSMaxType)),
                        "Invalid sensor type sensorType %d", sensorType);

    CAMX_LOG_VERBOSE(CamxLogGroupNCS, "Getting data sync tStart %llu tEnd %llu", tStart, tEnd);

    if (NULL != pNCSIntfObject)
    {
        pNCSDataObj = static_cast<NCSSensorData*>(pNCSIntfObject->GetDataSync(tStart, tEnd, m_NCSSensorContext.connIndex));
    }
    else
    {
        CAMX_LOG_ERROR(CamxLogGroupNCS, "Invalid interface handle !! Returning null accessor.");
        pNCSDataObj = NULL;
    }

    return pNCSDataObj;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetInterfaceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NCSIntfType NCSSensor::GetInterfaceType()
{
    return m_NCSSensorContext.interfaceType;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetClientId
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT NCSSensor::GetClientId()
{
    return m_NCSSensorContext.clientId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetSensorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NCSSensorType NCSSensor::GetSensorType()
{
    return m_NCSSensorContext.config.sensorType;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetSensorConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NCSSensorConfig* NCSSensor::GetSensorConfig()
{
    return &m_NCSSensorContext.config;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::PutBackDataObj
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CamxResult NCSSensor::PutBackDataObj(
    NCSSensorData* pNCSDataObject)
{
    INCSIntfBase*  pNCSIntfObject  = m_NCSSensorContext.pNCSIntfObject;
    CamxResult     result           = CamxResultEFailed;
    if ((NULL != pNCSIntfObject) && (NULL != pNCSDataObject))
    {
        CAMX_LOG_VERBOSE(CamxLogGroupNCS, "Put access object %p back", pNCSDataObject);
        result = pNCSIntfObject->EnqueueAccessor(this, static_cast<VOID*>(pNCSDataObject));
    }
    else
    {
        CAMX_LOG_ERROR(CamxLogGroupNCS, "Unable to put back object, NULL intf or acessor object");
    }
    return result;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::SetConnIndex
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAMX_VISIBILITY_PUBLIC VOID NCSSensor::SetConnIndex(
    INT connIndex)
{
    m_NCSSensorContext.connIndex = connIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetConnIndex
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAMX_VISIBILITY_PUBLIC INT NCSSensor::GetConnIndex()
{
    return m_NCSSensorContext.connIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::GetDataAsync
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CamxResult NCSSensor::GetDataAsync(
    UINT64 tStart,
    UINT64 tEnd,
    VOID* pFence)
{
    INCSIntfBase* pNCSIntfObject = m_NCSSensorContext.pNCSIntfObject;
    return pNCSIntfObject->GetDataAsync(tStart, tEnd, m_NCSSensorContext.connIndex, pFence);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NCSSensor::NCSSensor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NCSSensor::NCSSensor(
    INCSIntfBase*    pNCSIntfObject,
    UINT             clientId,
    NCSIntfType      interfaceType,
    NCSSensorConfig* pSensorConfig)
{
    m_NCSSensorContext.clientId              = clientId;
    m_NCSSensorContext.connIndex             = -1;
    m_NCSSensorContext.interfaceType         = interfaceType;
    m_NCSSensorContext.config                = *pSensorConfig;

    m_NCSSensorContext.pNCSIntfObject        = pNCSIntfObject;
    m_NCSSensorContext.suid                  = -1;

    // Add log to print the sensor config. The actual link is established when after the pipeline is created.
    CAMX_LOG_VERBOSE(CamxLogGroupNCS, "Creating sensor %d with op mode %d, config samplerate %f  reportrate %d",
         pSensorConfig->sensorType, pSensorConfig->operationMode, pSensorConfig->samplingRate, pSensorConfig->reportRate);
}

CAMX_NAMESPACE_END
