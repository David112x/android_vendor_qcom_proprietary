////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file camxeebindata.h
/// @brief API to interact with the underlying EEbin device
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXEEBINDATA_H
#define CAMXEEBINDATA_H

#include "camxcmdbuffermanager.h"
#include "camxcsl.h"
#include "camxcslsensordefs.h"
#include "camxdefs.h"
#include "camxhal3defs.h"
#include "camxhwcontext.h"
#include "camxpacket.h"
#include "camxsensorproperty.h"
#include "camxtypes.h"
#include "camxeebinlib.h"
#include "camxeebindriver.h"
#include "imagesensormodulesetmanager.h"
#include "camxeepromdriver.h"
#include "camxeepromdriverapi.h"

class   ImageSensorModuleSetManager;

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class containing APIs to interact with the underlying EEbinData hardware
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class EEbinData
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// EEbinData
    ///
    /// @brief  constructor for the EEbinData class.
    ///
    /// @param  deviceIndex device index to EEBin device.
    /// @param  hCSL        Handle to the CSL session.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    explicit EEbinData(
        INT32       deviceIndex,
        CSLHandle   hCSL);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~EEbinData
    ///
    /// @brief  Default destructor for the ~EEbinData class.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~EEbinData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetEEBinModules
    ///
    /// @brief  Helper method to get memory map information for eebin raw data.
    ///
    /// @param  pFileNames          output parameter to fill EEBin module paths
    /// @param  maxFileNameLength   maximum length of each module path
    ///
    /// @return number module paths filledin.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT16 GetEEBinModules(
        CHAR*  pFileNames,
        SIZE_T maxFileNameLength);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ReadEEBin
    ///
    /// @brief  Helper method to read the EEBin data when EEbin has higher version than the firmware
    ///
    /// @return CamxResultSuccess or Failure code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult ReadEEBin();

private:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LoadMemoryMapData
    ///
    /// @brief  Helper method to get memory map information for eebin raw data.
    ///
    /// @return success of failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult LoadMemoryMapData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ConfigurePowerSettings
    ///
    /// @brief  Helper method to configure power up/down settings.
    ///
    /// @return success of failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult ConfigurePowerSettings();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// InitializeCSL
    ///
    /// @brief  Helper method to initialize CSL session.
    ///
    /// @param  m_eebinDeviceIndex  EEBin device index
    ///
    /// @return CamxResultSuccess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult InitializeCSL(
        UINT32  m_eebinDeviceIndex);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UnInitialize
    ///
    /// @brief  Helper method to release and close the CSL session.
    ///
    /// @return CamxResultSuccess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult UnInitialize();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// WriteToFile
    ///
    /// @brief  Helper method to write EEBin data to the output file.
    ///
    /// @param  pData       input data.
    /// @param  dataSize    data size.
    /// @param  pFileName   file name.
    ///
    /// @return success or failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult WriteToFile(
        UCHAR*  pData,
        UINT32  dataSize,
        CHAR*   pFileName);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ReadWord
    ///
    /// @brief  Helper method to read the Word.
    ///
    /// @param  pData           Pointer to the data buffer
    /// @param  numberOfBytes   number of bytes to be read.
    /// @param  endian          type of the endian to specifiy read order
    ///
    /// @return integar
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 ReadWord(
        UINT8*     pData,
        UINT16     numberOfBytes,
        EndianType endian);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FormatEEBinData
    ///
    /// @brief  Helper method to format EEBin data
    ///
    /// @return Success/Failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult FormatEEBinData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TestReadDummyEEbin
    ///
    /// @brief  function to copy dummy file into memory.
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID TestReadDummyEEbin();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCommandBuffer
    ///
    /// @brief  Helper method to obtain command buffer
    ///
    /// @param  pCmdManager         pointer to the command buffer manager
    /// @param  ppPacketResource    Pointer to packet resource containing buffer info
    ///
    /// @return success or failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult GetCommandBuffer(
        CmdBufferManager*   pCmdManager,
        PacketResource**    ppPacketResource);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PrepareAndWriteEEBin
    ///
    /// @brief  Helper method to prepare EEBin data write
    ///
    /// @return CamxResultSuccess or Failure code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult PrepareAndWriteEEBin();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// WriteEEBinData
    ///
    /// @brief  Helper method to write the EEBin data to FROM
    ///
    /// @param  pDataWriteInfo    Pointer to write settings
    ///
    /// @return CamxResultSuccess or Failure code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult WriteEEBinData(
        SettingsInfo* pDataWriteInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FormatEEBinVersionData
    ///
    /// @brief  Helper method to format EEBin version data
    ///
    /// @return CamxResultSuccess or Failure code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult FormatEEBinVersionData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ReadEEBinVersion
    ///
    /// @brief  Helper method to read the EEbin version information
    ///
    /// @return CamxResultSuccess or Failure code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult ReadEEBinVersion();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ReadEEBinData
    ///
    /// @brief  Helper method to read the EEBin data
    ///
    /// @return CamxResultSuccess or Failure code.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult ReadEEBinData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VerifyChecksum
    ///
    /// @brief  Helper method to verify checksum
    ///
    /// @param  pData       data for which checksum needs to be verified
    /// @param  checksum    checksum value
    ///
    /// @return success or failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 VerifyChecksum(
        UCHAR* pData,
        UINT32 checksum);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetPowerSequenceCmdSize
    ///
    /// @brief  Get size for power up/down command buffer
    ///
    /// @param  isPowerUp   Is it power up or power down
    ///
    /// @return Size of the command buffer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT GetPowerSequenceCmdSize(
        BOOL isPowerUp);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreatePowerSequenceCmd
    ///
    /// @brief  Create power sequence commands
    ///
    /// @param  isPowerUp   Is it power up or power down
    /// @param  pCmdBuffer  Power up/down command
    ///
    /// @return CamxResultSuccess, if SUCCESS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult CreatePowerSequenceCmd(
        BOOL    isPowerUp,
        VOID*   pCmdBuffer);

    EEbinData(const EEbinData&)            = delete;        ///< Disallow the copy constructor
    EEbinData& operator=(const EEbinData&) = delete;        ///< Disallow assignment operator

    ImageSensorModuleSetManager*  m_pEEbinmoduleSetManager;       ///< EEBin module set manager to load the driver
    EEbinDriver*            m_pEEbinDriver;                 ///< Eebin driver
    CSLHandle               m_hEEbinSessionHandle;          ///< CSL session handle
    BOOL                    m_isCSLOpenByEEbin;             ///< Indicates whether CSL session is opened by EEBin or not
    CSLDeviceHandle         m_hEEbinDevice;                 ///< EEBin device handle
    INT32                   m_eebinDeviceIndex;             ///< Handle of EEBin device Index
    Packet*                 m_pEEbinVersionReadPacket;      ///< Handle of EEbin version read packet
    Packet*                 m_pEEbinDataReadPacket;         ///< Handle of EEBin read packet
    CmdBufferManager*       m_pVersionReadPacketManger;     ///< Command Buffer Manger for Packet
    CmdBufferManager*       m_pDataPacketManger;            ///< Command Buffer Manger for Packet
    ImageBuffer*            m_pVersionImage;                ///< Image buffer to hold the EEbin version data
    ImageBufferManager*     m_pVersionImageBufferManager;   ///< Image Buffer Manager object for version data
    ImageBuffer*            m_pDataImage;                   ///< Image buffer to hold the OTP data read
    ImageBufferManager*     m_pDataImageBufferManager;      ///< Image Buffer Manager object for the data
    UINT8*                  m_pVersionReadData;             ///< pointer to the OTP data read from EEBin
    UINT8*                  m_pEEbinData;                   ///< pointer to the EEBin data read
    UINT32                  m_pVersionSize;                 ///< Size of eebin version
    BOOL                    m_isEEBinDataReadRequired;      ///< boolean indicating whether the data needs to be read or not
    UINT32                  m_pEEBinDataSize;               ///< size of the EEBin data to read
};

CAMX_NAMESPACE_END

#endif // CAMXEEBINDATA_H
