// NOWHINE ENTIRE FILE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  icautils.h
/// @brief ICA register utility
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef ICAUTILS_H
#define ICAUTILS_H

#include "iqcommondefs.h"
#include "iqsettingutil.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class that implements ICA ultility functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
    INT32 mantissa;   // CFP_MANTISSA_BITS bits signed
    INT32 exponent;   // CFP_EXP_BITS bits signed
    BOOL  wasError;   // Error indication flag
} FPV;

static const INT32  CFPMantissaBits480    = 18;
static const INT32  CFPMantissaBits17x    = 16;
static const INT32  CFPExpBits            = 6;
static const INT32  CFPMantissaMask17x    = ((1 << CFPMantissaBits17x) - 1);
static const INT32  CFPMantissaMask480    = ((1 << CFPMantissaBits480) - 1);
static const INT32  CFPExponentMask       = ((1 << CFPExpBits) - 1);
static const INT32  ICAFpError            = (1 << (CFPMantissaBits17x + CFPExpBits));
static const FPV    FPError                 = { 0, 0, TRUE };
static const UINT32  CFPExponentMin       = ((0xFFFFFFFF) << (CFPExpBits - 1));
static const UINT32  CFPExponentMax       = ((0xFFFFFFFF) - CFPExponentMin);

class ICAUtils
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CalcMantissaExp4
    ///
    /// @brief  Calculate the scale factor
    ///
    /// @param  sa1    signed numerator dimension
    /// @param  ua2    unsigned numerator dimension
    /// @param  ub1    unsigned denomiator dimension
    /// @param  ub2    unsigned denominator dimension
    ///
    /// @return scale factor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT32 CalcMantissaExp4(
        INT32  sa1,
        UINT32 ua2,
        UINT32 ub1,
        UINT32 ub2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Log2Floor
    ///
    /// @brief  Calculate Log and floor the value
    ///
    /// @param  x   Integer whose log needs to be calculated
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 Log2Floor(
        UINT32 x);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Log2Ceil
    ///
    /// @brief  Calculate Log and ceil the value
    ///
    /// @param  x   Integer whose log needs to be calculated
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 Log2Ceil(
        UINT32 x);
private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CountLeadingZeros
    ///
    /// @brief  Count Leading zeros
    ///
    /// @param  x   integer number
    ///
    /// @return  integer with leading zeros factor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT32 CountLeadingZeros(
        UINT32 x);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SaturateSigned
    ///
    /// @brief  Calculate the signed  saturated number
    ///
    /// @param  val   integer number
    /// @param  sat   integer number
    ///
    /// @return  signed saturated number
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 SaturateSigned(
        INT32 val,
        UINT32 sat);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ConvertFloatToRegister
    ///
    /// @brief  Convert Floating point value to register
    ///
    /// @param  fpv   floating point value
    ///
    /// @return  register value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT32 ConvertFloatToRegister(
        FPV fpv);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DivCeil32
    ///
    /// @brief  Divide the two integer inputs and ceil the value of 32 bit integers
    ///
    /// @param  a   Numerator Integer
    /// @param  b   Denominator Integer
    ///
    /// @return  return quotient
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT32 DivCeil32(
        UINT32 a,
        UINT32 b);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DivCeil32
    ///
    /// @brief  Divide the two integer inputs and ceil the value of 64 bit integers
    ///
    /// @param  a   Numerator Integer
    /// @param  b   Denominator Integer
    ///
    /// @return  return quotient
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT32 DivCeil64(
        UINT64 a,
        UINT64 b);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Abs64
    ///
    /// @brief  Calculate absolute value of 64 bit intger
    ///
    /// @param  a   Integer
    ///
    /// @return  return absolute value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT64 Abs64(
        INT64 a);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Abs
    ///
    /// @brief  Calculate absolute value of 32 bit intger
    ///
    /// @param  a   Integer
    ///
    /// @return  return absolute value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static UINT32 Abs(
        INT32 a);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ConvertRatioToFloatImp
    ///
    /// @brief  Calculate the scale factor in floating point value
    ///
    /// @param  sa1    signed numerator dimension
    /// @param  ua2    unsigned numerator dimension
    /// @param  ub1    unsigned denomiator dimension
    /// @param  ub2    unsigned denominator dimension
    ///
    /// @return floating point value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FPV ConvertRatioToFloatImp(
        INT32 sa1,
        UINT32 ua2,
        UINT32 ub1,
        UINT32 ub2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ConvertRatioToFloat
    ///
    /// @brief  Calculate the scale factor in floating point value
    ///
    /// @param  sa1    signed numerator dimension
    /// @param  ua2    unsigned numerator dimension
    /// @param  ub1    unsigned denomiator dimension
    /// @param  ub2    unsigned denominator dimension
    ///
    /// @return floating point value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FPV ConvertRatioToFloat(
        INT32 sa1,
        UINT32 ua2,
        UINT32 ub1,
        UINT32 ub2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ExtendSign32
    ///
    /// @brief  Extend the signed bit
    ///
    /// @param  v   Integer whose sign need to be extended
    /// @param  sr  value by which integer need to be shifted
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 ExtendSign32(
        INT32 v,
        INT32 nbits);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ShiftRightBySignedVal
    ///
    /// @brief  Shift the signed value right for 32 integer
    ///
    /// @param  v   Integer that need to be right shifted
    /// @param  sr  value by which integer need to be shifted
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 ShiftRightBySignedVal(
        INT32 v,
        INT sr);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TreatLowExponent
    ///
    /// @brief  Treat  low exponent of floating point number
    ///
    /// @param  ret   pointer to floating point number
    ///
    /// @return  None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static VOID TreatLowExponent(
        FPV *ret);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CheckError
    ///
    /// @brief  Check if floating point number is valid
    ///
    /// @param  ret   pointer to floating point number
    ///
    /// @return  None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static VOID CheckError(
        FPV *ret);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HandleCornerCase
    ///
    /// @brief  handle Corner case if floating point is number is incorrect
    ///
    /// @param  ret   pointer to floating point number
    ///
    /// @return  None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static VOID HandleCornerCase(
        FPV *ret);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fpCreate
    ///
    /// @brief  Create floating point number
    ///
    /// @param  mantissa  mantissa of the number
    /// @param  exponent  exponent of the number
    ///
    /// @return  floating point number
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FPV fpCreate(
        INT32 mantissa,
        INT32 exponent);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Log2Floor
    ///
    /// @brief  Calculate Log and floor the value
    ///
    /// @param  x   Integer whose log needs to be calculated
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 Log2Floor64(
        UINT64 x);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ShiftRightBySignedVal64
    ///
    /// @brief  Shift the signed value right for 64 integer
    ///
    /// @param  v   Integer that need to be right shifted
    /// @param  sr  value by which integer need to be shifted
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static INT32 ShiftRightBySignedVal64(
        INT64 v, INT sr);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fpMult64
    ///
    /// @brief  Multiply floating point number
    ///
    /// @param  v1   Floating point value 1
    /// @param  v2   Floating point value 2
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FPV fpMult64(
        FPV v1,
        FPV v2);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fpMult32
    ///
    /// @brief  Multiply floating point number
    ///
    /// @param  v1   Floating point value 1
    /// @param  v2   Floating point value 2
    ///
    /// @return  log value calculated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static FPV fpMult32(
        FPV v1,
        FPV v2);
};
#endif // ICAUTILS_H
