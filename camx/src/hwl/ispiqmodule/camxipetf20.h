////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxipetf20.h
/// @brief camxipetf20 class declarations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXIPETF20_H
#define CAMXIPETF20_H

#include "camxformats.h"
#include "camxispiqmodule.h"
#include "ipe_data.h"
#include "iqcommondefs.h"

CAMX_NAMESPACE_BEGIN

/// @brief Internal Data to TF20
struct TF20internalData
{
    ISPInputData*  pISPInputData;           ///< ISP input data
    TF20InputData* pDependenceData;         ///< TF dependance Data
    BOOL           bValidateTFParams;       ///< flag to denote validation of TF params
    BOOL           bDisableTFRefinement;    ///< flag to disable TF refinement by settings
    UINT*          pOffsetPass;             ///< Passoffset values
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class for IPE TF20 Module
///
/// 2D filter for spatial noise reduction. Filtering done hierarchically in multi-pass approach using multiple scales of same
/// images and auxiliary information from previous scales as indications.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IPETF20 final : public ISPIQModule
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     /// Create
     ///
     /// @brief  Create IPETF20 Object
     ///
     /// @param  pCreateData Pointer to data for TF Creation
     ///
     /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CamxResult Create(
        IPEModuleCreateData* pCreateData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Initialize
    ///
    /// @brief  Initialize parameters
    ///
    /// @param  pCreateData Pointer to the Module Creation
    ///
    /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult Initialize(
        IPEModuleCreateData* pCreateData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Execute
    ///
    /// @brief  Execute process capture request to configure module
    ///
    /// @param  pInputData Pointer to the IPE input data
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult Execute(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModuleData
    ///
    /// @brief  Get IQ module specific data
    ///
    /// @param  pModuleData    Pointer pointing to Module specific data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CAMX_INLINE VOID GetModuleData(
        VOID* pModuleData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     /// ~IPETF20
     ///
     /// @brief  Destructor
     ///
     /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IPETF20();

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AllocateCommonLibraryData
    ///
    /// @brief  Allocate memory required for common library
    ///
    /// @return CamxResult success if the write operation is success
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult AllocateCommonLibraryData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DeallocateCommonLibraryData
    ///
    /// @brief  Deallocate memory required for common library
    ///
    /// @return CamxResult success if the write operation is success
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult DeallocateCommonLibraryData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPETF20
    ///
    /// @brief  Constructor
    ///
    /// @param  pNodeIdentifier     String identifier for the Node that creating this IQ Module object
    /// @param  pCreateData         Pointer to Create data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    explicit IPETF20(
        const CHAR*          pNodeIdentifier,
        IPEModuleCreateData* pCreateData);

private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetMaxSupportedPassesForUsecase
    ///
    /// @brief  Set max supported passes for usecase
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID SetMaxSupportedPassesForUsecase(
        const ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ValidateDependenceParams
    ///
    /// @brief  Validate the input crop info from client
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return CamxResult Indicates if the input is valid or invalid
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult ValidateDependenceParams(
        const ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CheckDependenceChange
    ///
    /// @brief  Check to see if the Dependence Trigger Data Changed
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return BOOL Indicates if the settings have changed compared to last setting
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL CheckDependenceChange(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RunCalculation
    ///
    /// @brief  Calculate the Register Value
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return CamxResult Indicates if configuration calculation was success or failure
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult RunCalculation(
        const ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CheckIPEInstanceProperty
    ///
    /// @brief  Check IPE Instance Property Data
    ///
    /// @param  pInput  Pointer to the ISP input data
    ///
    /// @return True if data changes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL CheckIPEInstanceProperty(
        ISPInputData* pInput);

    IPETF20(const IPETF20&) = delete;                            ///< Disallow the copy constructor
    IPETF20& operator=(const IPETF20&) = delete;                 ///< Disallow assignment operator

    const CHAR*                   m_pNodeIdentifier;             ///< String identifier for the Node that created this object
    TF20InputData                 m_dependenceData;              ///< Dependence Data for this Module
    UINT                          m_offsetPass[PASS_NAME_MAX];   ///< Offset where pass information starts for multipass
    UINT                          m_singlePassCmdLength;         ///< The length of the Command List, in bytes
    BOOL                          m_bypassMode;                  ///< Bypass ANR and TF
    BOOL                          m_enableCommonIQ;              ///< EnableCommon IQ module
    BOOL                          m_validateTFParams;            ///< Validate and correct TF params
    BOOL                          m_disableTFRefinement;         ///< disable TF refinement by settings
    tf_2_0_0::chromatix_tf20Type* m_pChromatix;                  ///< Pointer to tuning mode data
    RefinementParameters          m_refinementParams;            ///< Refinement Parameters
    TfParameters                  m_TFParams;                    ///< TF Parameters
    LmcParameters                 m_LMCParams;                   ///< Lmc parameter
};

CAMX_NAMESPACE_END

#endif // CAMXIPETF20_H
