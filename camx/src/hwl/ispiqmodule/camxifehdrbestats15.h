////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017, 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxifehdrbestats15.h
/// @brief HDR BE Stats15 class declarations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CAMXIFEHDRBESTATS15_H
#define CAMXIFEHDRBESTATS15_H

#include "camxispstatsmodule.h"
#include "camxiqinterface.h"

CAMX_NAMESPACE_BEGIN

/// @brif HW capability data
struct HDRBE15StatsHWCapability
{
    UINT32 regionMinWidth;      ///< Minimum HDR BE stats region width
    UINT32 regionMaxWidth;      ///< Maximum HDR BE stats region width
    UINT32 regionMinHeight;     ///< Minimum HDR BE stats region height
    UINT32 regionMaxHeight;     ///< Maximum HDR BE stats region height
    UINT32 maxHorizRegions;     ///< Maximum HDR BE stats horizontal region
    UINT32 maxVertRegions;      ///< Maximum HDR BE stats vertical region
    UINT32 maxChannelThreshold; ///< Maximum HDR BE channel threshold
};

/// @brief HDRBE v1.5 config data
struct HDRBE15ConfigData
{
    const ISPInputData* pISPInputData;          ///< Pointer to general ISP input data
    BGBEConfig*         pHDRBEConfig;           ///< HDR BE configuration data from stats
    UINT32              regionWidth;            ///< HDR BE individual region width
    UINT32              regionHeight;           ///< HDR BE individual region height
    UINT32              regionMultipleFactor;   ///< HDR BE region offset and dimension multiple factor
    UINT32              fieldSelect;            ///< Input Field selection for stats HDR BE in HDR mode
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief HDR BE Stats15 Class Implementation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class HDRBEStats15 final : public ISPStatsModule
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Create
    ///
    /// @brief  Create HDRBEStats15 Object
    ///
    /// @param  pCreateData Pointer to the HDRBEStats15 Creation
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CamxResult Create(
        IFEStatsModuleCreateData* pCreateData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Execute
    ///
    /// @brief  Execute process capture request to configure module
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult Execute(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetDMITable
    ///
    /// @brief  Retrieve the DMI LUT
    ///
    /// @param  ppDMITable Pointer to which the module should update different DMI tables
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual VOID GetDMITable(
       UINT32** ppDMITable);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~HDRBEStats15
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~HDRBEStats15();

protected:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HDRBEStats15
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    HDRBEStats15();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Initialize
    ///
    /// @brief  Initialize parameters
    ///
    /// @param  pCreateData Input data to initialize the module
    ///
    /// @return CamxResultSuccess if successful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult Initialize(
        IFEStatsModuleCreateData* pCreateData);

private:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ValidateDependenceParams
    ///
    /// @brief  Validate the stats region of interest configuration from stats module
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return CamxResult Indicates if the input is valid or invalid
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CamxResult ValidateDependenceParams(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CheckDependenceChange
    ///
    /// @brief  Check to see if the Dependence Trigger Data Changed
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return BOOL
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL CheckDependenceChange(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RunCalculation
    ///
    /// @brief  Calculate the Register Value
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID RunCalculation(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PrepareStripingParameters
    ///
    /// @brief  Prepare striping parameters for striping lib
    ///
    /// @param  pInputData Pointer to the Inputdata
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult PrepareStripingParameters(
        ISPInputData* pInputData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AdjustROIParams
    ///
    /// @brief  Adjust ROI from stats to requirement based on hardware
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID AdjustROIParams();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UpdateIFEInternalData
    ///
    /// @brief  Update IFE internal data
    ///
    /// @param  pInputData Pointer to the ISP input data
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID UpdateIFEInternalData(
        ISPInputData * pInputData);

    HDRBEStats15(const HDRBEStats15&)            = delete;    ///< Disallow the copy constructor
    HDRBEStats15& operator=(const HDRBEStats15&) = delete;    ///< Disallow assignment operator

    BGBEConfig          m_HDRBEConfig;                        ///< HDR BE configuration data from stats
    UINT32              m_regionMultipleFactor;               ///< HDR BE region offset and dimension multiple factor
    UINT32              m_fieldSelect;                        ///< Lines with in ROI which would contribute to HDR stats from Hw
    UINT32              m_regionWidth;                        ///< HDR BE individual region width
    UINT32              m_regionHeight;                       ///< HDR BE individual region height
    BOOL                m_isAdjusted;                         ///< Flag to indicate if ROI from stats was modified
    HDRBE15ConfigData   m_inputConfigData;                    ///< Input config data

    HDRBE15StatsHWCapability m_hwCapability;                  ///< HW capabilities
};

CAMX_NAMESPACE_END

#endif // CAMXIFEHDRBESTATS15_H
