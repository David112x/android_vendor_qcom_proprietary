////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxbpspipelinetitan170.h
/// @brief BPS Pipeline for Titan 170
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXBPSPIPELINETITAN170_H
#define CAMXBPSPIPELINETITAN170_H

#include "camxisppipeline.h"

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief BPS Pipeline 170 Class Implementation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class BPSPipelineTitan170 final: public ISPPipeline
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModuleList
    ///
    /// @brief  Function to be implemented to get the pipleine capability
    ///
    /// @param  pIQmoduleInfo structure into which capability info is filled
    ///
    /// @return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult GetModuleList(
                BPSIQModuleList* pIQmoduleInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetModuleListForMode
    ///
    /// @brief  Function to be implemented to get the pipleine capability in mode requested
    ///
    /// @param  pIQmoduleInfo structure into which capability info is filled
    /// @param  mode          returns the capability in this mode
    ///
    /// @return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult GetModuleListForMode(
                BPSIQModuleList* pIQmoduleInfo,
                UINT32 mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCapability
    ///
    /// @brief  virtual method to get the isp pipeline capability
    ///
    /// @param  pCapabilityInfo Pointer to the structure into which capability info is filled
    ///
    /// @return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult GetCapability(
        VOID* pCapabilityInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetICPClockAndBandWidthConfigurationVersion
    ///
    /// @brief  Helper to Get BandWidth configuration
    ///
    /// @return ICPBWconfiguration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual UINT32 GetICPClockAndBandWidthConfigurationVersion()
    {
        return CSLICPGenericBlobCmdBufferClk;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// BPSPipelineTitan170
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~BPSPipelineTitan170() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// BPSPipelineTitan170
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BPSPipelineTitan170() = default;

private:
    BPSPipelineTitan170(const BPSPipelineTitan170&)            = delete; ///< Disallow the copy constructor
    BPSPipelineTitan170& operator=(const BPSPipelineTitan170&) = delete; ///< Disallow assignment operator
};

CAMX_NAMESPACE_END

#endif // CAMXBPSPIPELINETITAN170_H