////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxipepipelinetitan150.h
/// @brief IPE Pipeline for Titan 150
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXIPEPIPELINETITAN150_H
#define CAMXIPEPIPELINETITAN150_H

#include "camxchicontext.h"
#include "camxisppipeline.h"

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief IPE Pipeline 150 Class Implementation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IPEPipelineTitan150 final: public ISPPipeline
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCapability
    ///
    /// @brief  virtual method to get the isp pipeline capability
    ///
    /// @param  pCapabilityInfo pointer to the structure into which capability info is filled
    ///
    /// @return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult GetCapability(
        VOID* pCapabilityInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPEPipelineTitan150
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~IPEPipelineTitan150() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPEPipelineTitan150
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IPEPipelineTitan150() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetICPClockAndBandWidthConfigurationVersion
    ///
    /// @brief  Helper to Get BandWidth configuration
    ///
    /// @return ICPBWconfiguration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual UINT32 GetICPClockAndBandWidthConfigurationVersion()
    {
        return CSLICPGenericBlobCmdBufferClk;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPEPipelineTitan150
    ///
    /// @brief  Constructor
    ///
    /// @param  pHwContext Pointer to the HW context
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    explicit IPEPipelineTitan150(
        HwContext* pHwContext);

private:
    IPEPipelineTitan150(const IPEPipelineTitan150&)            = delete; ///< Disallow the copy constructor
    IPEPipelineTitan150& operator=(const IPEPipelineTitan150&) = delete; ///< Disallow assignment operator

    HwContext* m_pHwContext;                                             ///< Pointer to the HW context
};

CAMX_NAMESPACE_END

#endif // CAMXIPEPIPELINETITAN150_H