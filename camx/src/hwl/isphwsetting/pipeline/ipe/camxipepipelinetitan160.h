////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxipepipelinetitan160.h
/// @brief IPE Pipeline for Titan 160
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXIPEPIPELINETITAN160_H
#define CAMXIPEPIPELINETITAN160_H

#include "camxchicontext.h"
#include "camxisppipeline.h"

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief IPE Pipeline 160 Class Implementation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IPEPipelineTitan160 final: public ISPPipeline
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetCapability
    ///
    /// @brief  virtual method to get the isp pipeline capability
    ///
    /// @param  pCapabilityInfo pointer to the structure into which capability info is filled
    ///
    /// @return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult GetCapability(
        VOID* pCapabilityInfo);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPEPipelineTitan160
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~IPEPipelineTitan160() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPEPipelineTitan160
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IPEPipelineTitan160() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetICPClockAndBandWidthConfigurationVersion
    ///
    /// @brief  Helper to Get BandWidth configuration
    ///
    /// @return ICPBWconfiguration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual UINT32 GetICPClockAndBandWidthConfigurationVersion()
    {
        return CSLICPGenericBlobCmdBufferClk;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IPEPipelineTitan160
    ///
    /// @brief  Constructor
    ///
    /// @param  pHwContext Pointer to the HW context
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    explicit IPEPipelineTitan160(
        HwContext* pHwContext);

private:
    IPEPipelineTitan160(const IPEPipelineTitan160&)            = delete; ///< Disallow the copy constructor
    IPEPipelineTitan160& operator=(const IPEPipelineTitan160&) = delete; ///< Disallow assignment operator

    HwContext* m_pHwContext;                                             ///< Pointer to the HW context
};

CAMX_NAMESPACE_END

#endif // CAMXIPEPIPELINETITAN160_H