////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxifedemux13titan17x.h
/// @brief IFE Demux13 register setting for Titan17x
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXIFEDEMUX13TITAN17X_H
#define CAMXIFEDEMUX13TITAN17X_H

#include "titan170_ife.h"
#include "camxisphwsetting.h"

CAMX_NAMESPACE_BEGIN

CAMX_BEGIN_PACKED
struct IFEDemux13RegCmd
{
    IFE_IFE_0_VFE_DEMUX_CFG          demuxConfig;     ///< Demux Config Register
    IFE_IFE_0_VFE_DEMUX_GAIN_0       demuxGain0;      ///< Demux Gain 0 Register
    IFE_IFE_0_VFE_DEMUX_GAIN_1       demuxGain1;      ///< Demux Gain 1 Register
    IFE_IFE_0_VFE_DEMUX_RIGHT_GAIN_0 demuxRightGain0; ///< Demux Right Plane Gain 0 Register
    IFE_IFE_0_VFE_DEMUX_RIGHT_GAIN_1 demuxRightGain1; ///< Demux Right Plane Gain 1 Register
    IFE_IFE_0_VFE_DEMUX_EVEN_CFG     demuxEvenConfig; ///< Defines the pattern for demuxpixeling even lines of the image
    IFE_IFE_0_VFE_DEMUX_ODD_CFG      demuxOddConfig;  ///< Defines the pattern for demuxpixeling odd lines of the image
} CAMX_PACKED;
CAMX_END_PACKED

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief IFE Demux13 resiter setting for titan17x
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IFEDemux13Titan17x final : public ISPHWSetting
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateCmdList
    ///
    /// @brief  Generate the Command List
    ///
    /// @param  pInputData       Pointer to the Inputdata
    /// @param  pDMIBufferOffset Pointer for DMI Buffer
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult CreateCmdList(
        VOID*   pInputData,
        UINT32* pDMIBufferOffset);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UpdateTuningMetadata
    ///
    /// @brief  Update Tuning Metadata
    ///
    /// @param  pTuningMetadata      Pointer to the Tuning Metadata
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult UpdateTuningMetadata(
        VOID*  pTuningMetadata);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PackIQRegisterSetting
    ///
    /// @brief  Packing register setting based on calculation data
    ///
    /// @param  pInput       Pointer to the Input data to the module for calculation
    /// @param  pOutput      Pointer to the Output data to the module for DMI buffer
    ///
    /// @return Return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult PackIQRegisterSetting(
        VOID* pInput,
        VOID* pOutput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetupRegisterSetting
    ///
    /// @brief  Setup register value based on CamX Input
    ///
    /// @param  pInput       Pointer to the Input data to the module for calculation
    ///
    /// @return Return CamxResult
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult SetupRegisterSetting(
        VOID*  pInput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IFEDemux13Titan17x
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IFEDemux13Titan17x();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~IFEDemux13Titan17x
    ///
    /// @brief  Destructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IFEDemux13Titan17x();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DumpRegConfig
    ///
    /// @brief  Print register configuration of Crop module for debug
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DumpRegConfig();

private:
    IFEDemux13Titan17x(const IFEDemux13Titan17x&)            = delete;    ///< Disallow the copy constructor
    IFEDemux13Titan17x& operator=(const IFEDemux13Titan17x&) = delete;    ///< Disallow assignment operator

    IFEDemux13RegCmd                    m_regCmd;         ///< Register List of this module
};

CAMX_NAMESPACE_END

#endif // CAMXIFEDEMUX13TITAN17X_H
