////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxifecsidrdititan480.h
/// @brief IFE CSID RDI register setting for Titan480
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CAMXIFECSIDRDITITAN480_H
#define CAMXIFECSIDRDITITAN480_H

// NOWHINE FILE GR027:  Hardware register naming convension
// NOWHINE FILE CP019:  Explicit constructor

#include "titan480_ife.h"
#include "camxisphwsetting.h"
#include "camxispiqmodule.h"

CAMX_NAMESPACE_BEGIN

CAMX_BEGIN_PACKED

/// @brief IFE CSID Reg Command
struct IFECSIDRDIRegCmd
{
    IFE_IFE_0_CLC_CSID_RDI0_RPP_PIX_DROP_PATTERN  pixelDropPattern; ///< Pixel Drop Pattern
    IFE_IFE_0_CLC_CSID_RDI0_RPP_PIX_DROP_PERIOD   pixelDropPeriod;  ///< Pixel Drop Period
    IFE_IFE_0_CLC_CSID_RDI0_RPP_LINE_DROP_PATTERN lineDropPattern;  ///< Line Drop Pattern
    IFE_IFE_0_CLC_CSID_RDI0_RPP_LINE_DROP_PERIOD  lineDropPeriod;   ///< Line Drop Period
} CAMX_PACKED;


CAMX_END_PACKED

static const UINT32 IFECSIDRDIRegLengthDWord = sizeof(IFECSIDRDIRegCmd) / sizeof(UINT32);

const UINT32 IFECSIDRDI0RegCmdOffset = regIFE_IFE_0_CLC_CSID_RDI0_RPP_PIX_DROP_PATTERN;
const UINT32 IFECSIDRDI1RegCmdOffset = regIFE_IFE_0_CLC_CSID_RDI1_RPP_PIX_DROP_PATTERN;
const UINT32 IFECSIDRDI2RegCmdOffset = regIFE_IFE_0_CLC_CSID_RDI2_RPP_PIX_DROP_PATTERN;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief IFE CSID register setting for Titan480
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IFECSIDRDITitan480 final : public ISPHWSetting
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateCmdList
    ///
    /// @brief  Generate the Command List
    ///
    /// @param  pInputData       Pointer to the Inputdata
    /// @param  pDMIBufferOffset Pointer for DMI Buffer
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult CreateCmdList(
        VOID*   pInputData,
        UINT32* pDMIBufferOffset);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PackIQRegisterSetting
    ///
    /// @brief  Calculate register settings based on common library result
    ///
    /// @param  pInput       Pointer to the Input data to the module for calculation
    /// @param  pOutput      Pointer to the Output data
    ///
    /// @return Return CamxResult.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult PackIQRegisterSetting(
        VOID* pInput,
        VOID* pOutput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetupRegisterSetting
    ///
    /// @brief  Setup register value based on CamX Input
    ///
    /// @param  pInput       Pointer to the Input data to the module for calculation
    ///
    /// @return Return CamxResult.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult SetupRegisterSetting(
        VOID*  pInput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~IFECSIDRDITitan480
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IFECSIDRDITitan480();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IFECSIDRDITitan480
    ///
    /// @brief  Constructor
    ///
    /// @param  pipelinePath   CSID RDI path
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IFECSIDRDITitan480(
        IFEPipelinePath pipelinePath);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DumpRegConfig
    ///
    /// @brief  Print register configuration of Crop module for debug
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DumpRegConfig();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CopyRegCmd
    ///
    /// @brief  Copy register settings to the input buffer
    ///
    /// @param  pData  Pointer to the Input data buffer
    ///
    /// @return Number of bytes copied
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 CopyRegCmd(
        VOID* pData);

private:

    IFEPipelinePath      m_path;           ///< Path
    IFECSIDRDIRegCmd     m_regCmd;         ///< Register List 1 of this module

    IFECSIDRDITitan480(const IFECSIDRDITitan480&)            = delete; ///< Disallow the copy constructor
    IFECSIDRDITitan480& operator=(const IFECSIDRDITitan480&) = delete; ///< Disallow assignment operator
};

CAMX_NAMESPACE_END

#endif // CAMXIFECSIDRDITITAN480_H
