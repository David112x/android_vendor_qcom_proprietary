////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxifecamifpdaftitan480.h
/// @brief IFE CAMIF register setting for Titan480
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CAMXIFECAMIFPDAFTITAN480_H
#define CAMXIFECAMIFPDAFTITAN480_H

// NOWHINE FILE GR027:  Hardware register naming convension
// NOWHINE FILE CP019:  Explicit constructor

#include "titan480_ife.h"
#include "camxisphwsetting.h"

CAMX_NAMESPACE_BEGIN

CAMX_BEGIN_PACKED
/// @brief IFE CAMIF Module Register Set 1
struct IFECAMIFPDAFRegCmd1
{
    IFE_IFE_0_PDLIB_CLC_CAMIF_MODULE_CFG configRegister; ///< Camif module configuration
} CAMX_PACKED;

/// @brief IFE CAMIF Module Register Set 3
struct IFECAMIFPDAFRegCmd2
{
    IFE_IFE_0_PDLIB_CLC_CAMIF_PERIOD_CFG                periodConfigureRegister;     ///< Camif skip period
    IFE_IFE_0_PDLIB_CLC_CAMIF_IRQ_SUBSAMPLE_PATTERN_CFG irqSubsamplePatternRegister; ///< Camif irq subsample pattern
} CAMX_PACKED;



CAMX_END_PACKED

static const UINT32 IFECAMIFPDAFRegLengthDWord1 = sizeof(IFECAMIFPDAFRegCmd1) / sizeof(UINT32);
static const UINT32 IFECAMIFPDAFRegLengthDWord2 = sizeof(IFECAMIFPDAFRegCmd2) / sizeof(UINT32);

const UINT32 IFECamifPDAFRegCmd1Offset = regIFE_IFE_0_PDLIB_CLC_CAMIF_MODULE_CFG;
const UINT32 IFECamifPDAFRegCmd2Offset = regIFE_IFE_0_PDLIB_CLC_CAMIF_PERIOD_CFG;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief IFE CAMIF register setting for Titan480
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IFECAMIFPDAFTitan480 final : public ISPHWSetting
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateCmdList
    ///
    /// @brief  Generate the Command List
    ///
    /// @param  pInputData       Pointer to the Inputdata
    /// @param  pDMIBufferOffset Pointer for DMI Buffer
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult CreateCmdList(
        VOID*   pInputData,
        UINT32* pDMIBufferOffset);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PackIQRegisterSetting
    ///
    /// @brief  Calculate register settings based on common library result
    ///
    /// @param  pInput  Pointer to the Input data to the module for calculation
    /// @param  pOutput Pointer to the Output data
    ///
    /// @return Return CamxResult.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult PackIQRegisterSetting(
        VOID* pInput,
        VOID* pOutput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetupRegisterSetting
    ///
    /// @brief  Setup register value based on CamX Input
    ///
    /// @param  pInput Pointer to the Input data to the module for calculation
    ///
    /// @return Return CamxResult.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult SetupRegisterSetting(
        VOID*  pInput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~IFECAMIFPDAFTitan480
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IFECAMIFPDAFTitan480();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IFECAMIFPDAFTitan480
    ///
    /// @brief  Constructor
    ///
    /// @param  instance PDAF camif instance id. (zero based)
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IFECAMIFPDAFTitan480(
        UINT32 instance);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DumpRegConfig
    ///
    /// @brief  Print register configuration of Crop module for debug
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DumpRegConfig();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CopyRegCmd
    ///
    /// @brief  Copy register settings to the input buffer
    ///
    /// @param  pData  Pointer to the Input data buffer
    ///
    /// @return Number of bytes copied
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 CopyRegCmd(
        VOID* pData);

private:

    UINT32              m_instance;       ///< Instance id (zero based)
    IFECAMIFPDAFRegCmd1 m_regCmd1;        ///< Register List 1 of this module
    IFECAMIFPDAFRegCmd2 m_regCmd2;        ///< Register List 2 of this module

    IFECAMIFPDAFTitan480(const IFECAMIFPDAFTitan480&)            = delete; ///< Disallow the copy constructor
    IFECAMIFPDAFTitan480& operator=(const IFECAMIFPDAFTitan480&) = delete; ///< Disallow assignment operator
};

CAMX_NAMESPACE_END

#endif // CAMXIFECAMIFPDAFTITAN480_H
