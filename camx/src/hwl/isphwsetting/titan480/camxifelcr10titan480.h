////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxifelcr10titan480.h
/// @brief IFE LCR10 register setting for Titan480
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CAMXIFELCR10TITAN480_H
#define CAMXIFELCR10TITAN480_H

#include "titan480_ife.h"
#include "camxdefs.h"
#include "camxisphwsetting.h"
#include "camxispiqmodule.h"

CAMX_NAMESPACE_BEGIN

CAMX_BEGIN_PACKED

/// @brief IFE LCR10 Config
struct IFELCR10Config
{
    IFE_IFE_0_CLC_LCRCROP_LINE_CFG  cropLineConfig;  ///< Line Crop config
    IFE_IFE_0_CLC_LCRCROP_PIXEL_CFG cropPixelConfig; ///< Pixel crop config
    IFE_IFE_0_CLC_LCRC_EXT_CFG_0    cfg0;            ///< Config 0
    IFE_IFE_0_CLC_LCRC_EXT_CFG_1    cfg1;            ///< Config 1
    IFE_IFE_0_CLC_LCRC_EXT_CFG_2    cfg2;            ///< Config 2
    IFE_IFE_0_CLC_LCRC_EXT_CFG_3    cfg3;            ///< Config 3
    IFE_IFE_0_CLC_LCRC_EXT_CFG_4    cfg4;            ///< Config 4
    IFE_IFE_0_CLC_LCRC_EXT_CFG_5    cfg5;            ///< Config 5
} CAMX_PACKED;

/// @brief IFE LCR10 Module Dependence Data
struct IFELCR10RegCmd
{
    IFE_IFE_0_CLC_LCRMODULE_CFG moduleConfig; ///< LCR Module Config
    IFELCR10Config              lcrConfig;    ///< LCR Config
} CAMX_PACKED;

CAMX_END_PACKED

static const UINT32 MaxLCRBlockHeight      = 63;  // Max Block height is 64 - 1
static const UINT32 MinLCRBlockHeight      = 3;  // Min Block height is 4 - 1
static const UINT32 IFELCR10RegLengthDWord = sizeof(IFELCR10RegCmd) / sizeof(UINT32);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief IFE LCR10 register setting for Titan480
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IFELCR10Titan480 final : public ISPHWSetting
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CreateCmdList
    ///
    /// @brief  Generate the Command List
    ///
    /// @param  pInputData       Pointer to the Inputdata
    /// @param  pDMIBufferOffset Pointer for DMI Buffer
    ///
    /// @return CamxResultSuccess if successful.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult CreateCmdList(
        VOID*   pInputData,
        UINT32* pDMIBufferOffset);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PackIQRegisterSetting
    ///
    /// @brief  Calculate register settings based on common library result
    ///
    /// @param  pInput       Pointer to the Input data to the module for calculation
    /// @param  pOutput      Pointer to the Output data to the module for DMI buffer
    ///
    /// @return Return CamxResult.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult PackIQRegisterSetting(
        VOID* pInput,
        VOID* pOutput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SetupRegisterSetting
    ///
    /// @brief  Setup register value based on CamX Input
    ///
    /// @param  pInput       Pointer to the Input data to the module for calculation
    ///
    /// @return Return CamxResult.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual CamxResult SetupRegisterSetting(
        VOID*  pInput);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ~IFELCR10Titan480
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IFELCR10Titan480();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IFELCR10Titan480
    ///
    /// @brief  Constructor
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IFELCR10Titan480();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DumpRegConfig
    ///
    /// @brief  Print register configuration of Crop module for debug
    ///
    ///
    /// @return None
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VOID DumpRegConfig();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CopyRegCmd
    ///
    /// @brief  Copy register settings to the input buffer
    ///
    /// @param  pData  Pointer to the Input data buffer
    ///
    /// @return Number of bytes copied
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 CopyRegCmd(
        VOID* pData);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetNumberOfSetBitsInMask
    ///
    /// @brief  Helper method to determine number of bits set in a given mask
    ///
    /// @param  mask    Mask value
    ///
    /// @return Number of set bits in a Mask
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CAMX_INLINE UINT32 GetNumberOfSetBitsInMask(
        UINT64 mask
    ) const
    {
        UINT32 count = 0;

        while (0 < mask)
        {
            count++;
            mask = mask & (mask - 1);
        }

        return count;
    }

private:
    IFELCR10RegCmd       m_regCmd; ///< Register List of this Module

    IFELCR10Titan480(const IFELCR10Titan480&)            = delete; ///< Disallow the copy constructor
    IFELCR10Titan480& operator=(const IFELCR10Titan480&) = delete; ///< Disallow assignment operator
};

CAMX_NAMESPACE_END

#endif // CAMXIFELCR10TITAN480_H
