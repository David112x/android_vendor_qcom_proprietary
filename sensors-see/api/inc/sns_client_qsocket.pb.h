/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Tue Feb  6 11:18:26 2018. */

#ifndef PB_SNS_CLIENT_QSOCKET_PB_H_INCLUDED
#define PB_SNS_CLIENT_QSOCKET_PB_H_INCLUDED
#include <pb.h>

#include "sns_client.pb.h"

#include "sns_std.pb.h"

#include "sns_std_type.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _sns_client_qsocket_ind {
    uint64_t client_id;
    sns_client_event_msg event;
/* @@protoc_insertion_point(struct:sns_client_qsocket_ind) */
} sns_client_qsocket_ind;

typedef struct _sns_client_qsocket_req {
    sns_client_request_msg request;
    uint32_t request_id;
    bool has_ind_len_max;
    uint32_t ind_len_max;
/* @@protoc_insertion_point(struct:sns_client_qsocket_req) */
} sns_client_qsocket_req;

typedef struct _sns_client_qsocket_resp {
    uint64_t client_id;
    uint32_t request_id;
    sns_std_error error;
/* @@protoc_insertion_point(struct:sns_client_qsocket_resp) */
} sns_client_qsocket_resp;

typedef struct _sns_client_qsocket_msg {
    pb_size_t which_msg;
    union {
        sns_client_qsocket_req req;
        sns_client_qsocket_resp resp;
        sns_client_qsocket_ind ind;
    } msg;
/* @@protoc_insertion_point(struct:sns_client_qsocket_msg) */
} sns_client_qsocket_msg;

/* Default values for struct fields */

/* Initializer values for message structs */
#define sns_client_qsocket_req_init_default      {sns_client_request_msg_init_default, 0, false, 0}
#define sns_client_qsocket_resp_init_default     {0, 0, (sns_std_error)0}
#define sns_client_qsocket_ind_init_default      {0, sns_client_event_msg_init_default}
#define sns_client_qsocket_msg_init_default      {0, {sns_client_qsocket_req_init_default}}
#define sns_client_qsocket_req_init_zero         {sns_client_request_msg_init_zero, 0, false, 0}
#define sns_client_qsocket_resp_init_zero        {0, 0, (sns_std_error)0}
#define sns_client_qsocket_ind_init_zero         {0, sns_client_event_msg_init_zero}
#define sns_client_qsocket_msg_init_zero         {0, {sns_client_qsocket_req_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define sns_client_qsocket_ind_client_id_tag     1
#define sns_client_qsocket_ind_event_tag         2
#define sns_client_qsocket_req_request_tag       1
#define sns_client_qsocket_req_request_id_tag    2
#define sns_client_qsocket_req_ind_len_max_tag   3
#define sns_client_qsocket_resp_client_id_tag    1
#define sns_client_qsocket_resp_request_id_tag   2
#define sns_client_qsocket_resp_error_tag        3
#define sns_client_qsocket_msg_req_tag           1
#define sns_client_qsocket_msg_resp_tag          2
#define sns_client_qsocket_msg_ind_tag           3

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_client_qsocket_req_fields[4];
extern const pb_field_t sns_client_qsocket_resp_fields[4];
extern const pb_field_t sns_client_qsocket_ind_fields[3];
extern const pb_field_t sns_client_qsocket_msg_fields[4];

/* Maximum encoded size of messages (where known) */
#define sns_client_qsocket_req_size              (53 + sns_std_request_size)
#define sns_client_qsocket_resp_size             16
#define sns_client_qsocket_ind_size              (15 + sns_client_event_msg_size)
/* sns_client_qsocket_msg_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_CLIENT_QSOCKET_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
