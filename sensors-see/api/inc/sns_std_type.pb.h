/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Mon Jun  5 12:27:59 2017. */

#ifndef PB_SNS_STD_TYPE_PB_H_INCLUDED
#define PB_SNS_STD_TYPE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_std_error {
    SNS_STD_ERROR_NO_ERROR = 0,
    SNS_STD_ERROR_FAILED = 1,
    SNS_STD_ERROR_NOT_SUPPORTED = 2,
    SNS_STD_ERROR_INVALID_TYPE = 3,
    SNS_STD_ERROR_INVALID_STATE = 4,
    SNS_STD_ERROR_INVALID_VALUE = 5,
    SNS_STD_ERROR_NOT_AVAILABLE = 6,
    SNS_STD_ERROR_POLICY = 7
} sns_std_error;
#define _sns_std_error_MIN SNS_STD_ERROR_NO_ERROR
#define _sns_std_error_MAX SNS_STD_ERROR_POLICY
#define _sns_std_error_ARRAYSIZE ((sns_std_error)(SNS_STD_ERROR_POLICY+1))
#define sns_std_error_SNS_STD_ERROR_NO_ERROR SNS_STD_ERROR_NO_ERROR
#define sns_std_error_SNS_STD_ERROR_FAILED SNS_STD_ERROR_FAILED
#define sns_std_error_SNS_STD_ERROR_NOT_SUPPORTED SNS_STD_ERROR_NOT_SUPPORTED
#define sns_std_error_SNS_STD_ERROR_INVALID_TYPE SNS_STD_ERROR_INVALID_TYPE
#define sns_std_error_SNS_STD_ERROR_INVALID_STATE SNS_STD_ERROR_INVALID_STATE
#define sns_std_error_SNS_STD_ERROR_INVALID_VALUE SNS_STD_ERROR_INVALID_VALUE
#define sns_std_error_SNS_STD_ERROR_NOT_AVAILABLE SNS_STD_ERROR_NOT_AVAILABLE
#define sns_std_error_SNS_STD_ERROR_POLICY SNS_STD_ERROR_POLICY

typedef enum _sns_std_client_processor {
    SNS_STD_CLIENT_PROCESSOR_SSC = 0,
    SNS_STD_CLIENT_PROCESSOR_APSS = 1,
    SNS_STD_CLIENT_PROCESSOR_ADSP = 2,
    SNS_STD_CLIENT_PROCESSOR_MDSP = 3,
    SNS_STD_CLIENT_PROCESSOR_CDSP = 4,
    SNS_STD_CLIENT_PROCESSOR_COUNT = 5
} sns_std_client_processor;
#define _sns_std_client_processor_MIN SNS_STD_CLIENT_PROCESSOR_SSC
#define _sns_std_client_processor_MAX SNS_STD_CLIENT_PROCESSOR_COUNT
#define _sns_std_client_processor_ARRAYSIZE ((sns_std_client_processor)(SNS_STD_CLIENT_PROCESSOR_COUNT+1))
#define sns_std_client_processor_SNS_STD_CLIENT_PROCESSOR_SSC SNS_STD_CLIENT_PROCESSOR_SSC
#define sns_std_client_processor_SNS_STD_CLIENT_PROCESSOR_APSS SNS_STD_CLIENT_PROCESSOR_APSS
#define sns_std_client_processor_SNS_STD_CLIENT_PROCESSOR_ADSP SNS_STD_CLIENT_PROCESSOR_ADSP
#define sns_std_client_processor_SNS_STD_CLIENT_PROCESSOR_MDSP SNS_STD_CLIENT_PROCESSOR_MDSP
#define sns_std_client_processor_SNS_STD_CLIENT_PROCESSOR_CDSP SNS_STD_CLIENT_PROCESSOR_CDSP
#define sns_std_client_processor_SNS_STD_CLIENT_PROCESSOR_COUNT SNS_STD_CLIENT_PROCESSOR_COUNT

/* Struct definitions */
typedef struct _sns_std_attr_value {
    pb_callback_t values;
/* @@protoc_insertion_point(struct:sns_std_attr_value) */
} sns_std_attr_value;

typedef struct _sns_std_attr {
    int32_t attr_id;
    sns_std_attr_value value;
/* @@protoc_insertion_point(struct:sns_std_attr) */
} sns_std_attr;

typedef struct _sns_std_attr_value_data {
    bool has_subtype;
    sns_std_attr_value subtype;
    pb_callback_t str;
    bool has_flt;
    float flt;
    bool has_sint;
    int64_t sint;
    bool has_boolean;
    bool boolean;
/* @@protoc_insertion_point(struct:sns_std_attr_value_data) */
} sns_std_attr_value_data;

typedef struct _sns_std_suid {
    uint64_t suid_low;
    uint64_t suid_high;
/* @@protoc_insertion_point(struct:sns_std_suid) */
} sns_std_suid;

/* Default values for struct fields */

/* Initializer values for message structs */
#define sns_std_suid_init_default                {0, 0}
#define sns_std_attr_value_init_default          {{{NULL}, NULL}}
#define sns_std_attr_value_data_init_default     {false, sns_std_attr_value_init_default, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define sns_std_attr_init_default                {0, sns_std_attr_value_init_default}
#define sns_std_suid_init_zero                   {0, 0}
#define sns_std_attr_value_init_zero             {{{NULL}, NULL}}
#define sns_std_attr_value_data_init_zero        {false, sns_std_attr_value_init_zero, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define sns_std_attr_init_zero                   {0, sns_std_attr_value_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define sns_std_attr_value_values_tag            1
#define sns_std_attr_attr_id_tag                 1
#define sns_std_attr_value_tag                   2
#define sns_std_attr_value_data_subtype_tag      1
#define sns_std_attr_value_data_str_tag          2
#define sns_std_attr_value_data_flt_tag          3
#define sns_std_attr_value_data_sint_tag         4
#define sns_std_attr_value_data_boolean_tag      5
#define sns_std_suid_suid_low_tag                1
#define sns_std_suid_suid_high_tag               2

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_std_suid_fields[3];
extern const pb_field_t sns_std_attr_value_fields[2];
extern const pb_field_t sns_std_attr_value_data_fields[6];
extern const pb_field_t sns_std_attr_fields[3];

/* Maximum encoded size of messages (where known) */
#define sns_std_suid_size                        18
/* sns_std_attr_value_size depends on runtime parameters */
/* sns_std_attr_value_data_size depends on runtime parameters */
#define sns_std_attr_size                        (17 + sns_std_attr_value_size)

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_STD_TYPE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
