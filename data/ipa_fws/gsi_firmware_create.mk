# Check GSI FW file existence
ifeq ("$(wildcard $(LOCAL_PATH)/$(GSI_FW_FILE))","")
$(info IPA_FWS: $(LOCAL_PATH)/$(GSI_FW_FILE) does not exist!)
else
BINS_GSI := $(LOCAL_PATH)/$(GSI_FW_FILE) $(LOCAL_PATH)/$(HPS_BIN) $(LOCAL_PATH)/dps.bin
TOOLS_GSI := $(LOCAL_PATH)/elf_creator.py $(SECIMAGE_BASE)/sectools_builder.py $(PILSPLITTER_BASE)/pil-splitter.py
OUT_GSI_FW := $(OUT_DIR)/ipa_tmp_gsi_$(FW_FILE_NAME)

GEN_IMG_GSI := $(FW_FILE_NAME).elf
ifeq ($(USES_SEC_POLICY_MULTIPLE_DEFAULT_SIGN),1)
GEN_IMG_GSI_OTHERS := $(FW_FILE_NAME).b00 $(FW_FILE_NAME).b01 $(FW_FILE_NAME).b02 $(FW_FILE_NAME).b03 $(FW_FILE_NAME).b04 $(FW_FILE_NAME).mdt
GEN_IMG_GSI_LAST := $(FW_FILE_NAME).b04
else
GEN_IMG_GSI_OTHERS := $(FW_FILE_NAME).b00 $(FW_FILE_NAME).b01 $(FW_FILE_NAME).b02 $(FW_FILE_NAME).mdt
GEN_IMG_GSI_LAST := $(FW_FILE_NAME).b02
endif
$(info GEN_IMG_GSI_OTHERS=$(GEN_IMG_GSI_OTHERS) GEN_IMG_GSI_LAST=$(GEN_IMG_GSI_LAST))

include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME)
LOCAL_SANITIZE:=integer_overflow

ifneq ($(call is-board-platform-in-list,$(IPA_FWS_DISABLE_PLATFORM_LIST)),true)
LOCAL_INIT_RC := ipa_fws.rc
endif

LOCAL_MODULE_PATH := $(OUT_GSI_FW)
LOCAL_PROPRIETARY_MODULE := true
LOCAL_REQUIRED_MODULES := $(GEN_IMG_GSI) $(GEN_IMG_GSI_OTHERS)
include $(BUILD_PHONY_PACKAGE)

include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME).b00
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(GEN_IMG_DIR)/$(GEN_IMG_GSI)
	echo "IPA_FWS staging $(PRIVATE_FILE)"
	if [ -d $(PRIVATE_OUT_GSI_FW) ]; then \
		cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FILE) $@; \
	else \
		touch $@; \
	fi

include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME).b01
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(GEN_IMG_DIR)/$(FW_FILE_NAME).b00
	echo "IPA_FWS staging $(PRIVATE_FILE)"
	if [ -d $(PRIVATE_OUT_GSI_FW) ]; then \
		cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FILE) $@; \
	else \
		touch $@; \
	fi

include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME).b02
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(GEN_IMG_DIR)/$(FW_FILE_NAME).b01
	echo "IPA_FWS staging $(PRIVATE_FILE)"
	if [ -d $(PRIVATE_OUT_GSI_FW) ]; then \
		cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FILE) $@; \
	else \
		touch $@; \
	fi

ifeq ($(USES_SEC_POLICY_MULTIPLE_DEFAULT_SIGN),1)
include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME).b03
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(GEN_IMG_DIR)/$(FW_FILE_NAME).b02
	echo "IPA_FWS staging $(PRIVATE_FILE)"
	if [ -d $(PRIVATE_OUT_GSI_FW) ]; then \
		cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FILE) $@; \
	else \
		touch $@; \
	fi

include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME).b04
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(GEN_IMG_DIR)/$(FW_FILE_NAME).b03
	echo "IPA_FWS staging $(PRIVATE_FILE)"
	if [ -d $(PRIVATE_OUT_GSI_FW) ]; then \
		cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FILE) $@; \
	else \
		touch $@; \
	fi
endif

include $(CLEAR_VARS)
LOCAL_MODULE := $(FW_FILE_NAME).mdt
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(GEN_IMG_DIR)/$(GEN_IMG_GSI) $(GEN_IMG_DIR)/$(GEN_IMG_GSI_LAST)
	echo "IPA_FWS staging $(PRIVATE_FILE)"
	if [ -d $(PRIVATE_OUT_GSI_FW) ]; then \
		cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FILE) $@; \
		rm -rf $(PRIVATE_OUT_GSI_FW); \
	else \
		touch $@; \
	fi

include $(CLEAR_VARS)
LOCAL_MODULE := $(GEN_IMG_GSI)
LOCAL_SANITIZE:=integer_overflow
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ipa
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MODULE_PATH := $(GEN_IMG_DIR)
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): PRIVATE_PATH := $(LOCAL_PATH)
$(LOCAL_BUILT_MODULE): PRIVATE_ELF_FILE := $(LOCAL_MODULE)
$(LOCAL_BUILT_MODULE): PRIVATE_GSI_FW_FILE := $(GSI_FW_FILE)
$(LOCAL_BUILT_MODULE): PRIVATE_HPS_ADDR := $(HPS_ADDR)
$(LOCAL_BUILT_MODULE): PRIVATE_DPS_ADDR := $(DPS_ADDR)
$(LOCAL_BUILT_MODULE): PRIVATE_GSI_MEM_SIZE := $(GSI_MEM_SIZE)
$(LOCAL_BUILT_MODULE): PRIVATE_GSI_ADDR := $(GSI_ADDR)
$(LOCAL_BUILT_MODULE): PRIVATE_FW_FILE_NAME := $(FW_FILE_NAME)
$(LOCAL_BUILT_MODULE): PRIVATE_SECIMAGE_CONFIG_FILE := $(IPA_SECIMAGE_CONFIG_FILE)
$(LOCAL_BUILT_MODULE): PRIVATE_SOC_HW_VERSION := $(IPA_SOC_HW_VERSION)
$(LOCAL_BUILT_MODULE): PRIVATE_SOC_VERS := $(IPA_SOC_VERS)
$(LOCAL_BUILT_MODULE): PRIVATE_OUT_GSI_FW := $(OUT_GSI_FW)
$(LOCAL_BUILT_MODULE): $(BINS_GSI) $(TOOLS_GSI)
	mkdir -p $(PRIVATE_OUT_GSI_FW)
	# Assemble binaries/firmwares to a single ELF file
	python $(PRIVATE_PATH)/elf_creator.py \
		--gsi_fw $(PRIVATE_PATH)/$(PRIVATE_GSI_FW_FILE) \
		--gsi_fw_address $(PRIVATE_GSI_ADDR) \
		--gsi_fw_mem_size $(PRIVATE_GSI_MEM_SIZE) \
		--hps $(PRIVATE_PATH)/$(HPS_BIN) \
		--hps_addr $(PRIVATE_HPS_ADDR) \
		--dps $(PRIVATE_PATH)/dps.bin \
		--dps_addr $(PRIVATE_DPS_ADDR) \
		--outfile $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_ELF_FILE)
	echo IPA_FWS: Creating ipa ELF image OUT folders
	mkdir -p $(PRODUCT_OUT)/ipa
	mkdir -p $(PRODUCT_OUT)/ipa/signed
	mkdir -p $(PRODUCT_OUT)/ipa/unsigned
	echo IPA_FWS: install unsigned $(PRIVATE_ELF_FILE) at $(PRODUCT_OUT)/ipa/unsigned
	cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_ELF_FILE) $(PRODUCT_OUT)/ipa/unsigned
	# Sign the ELF file using SecImage tool
	SECIMAGE_LOCAL_DIR=$(SECIMAGE_BASE) USES_SEC_POLICY_MULTIPLE_DEFAULT_SIGN=$(USES_SEC_POLICY_MULTIPLE_DEFAULT_SIGN) \
	python $(SECIMAGE_BASE)/sectools_builder.py \
		-i $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_ELF_FILE) \
		-g ipa_fw \
		-t $(PRIVATE_OUT_GSI_FW) \
		--install_base_dir=$(PRIVATE_OUT_GSI_FW) \
		--config $(SECIMAGE_BASE)/$(PRIVATE_SECIMAGE_CONFIG_FILE) \
		--soc_hw_version=$(PRIVATE_SOC_HW_VERSION) \
		--soc_vers=$(PRIVATE_SOC_VERS) \
		> $(PRIVATE_OUT_GSI_FW)/secimage.log 2>&1
	echo IPA_FWS: install signed $(PRIVATE_ELF_FILE) at $(PRODUCT_OUT)/ipa/signed
	cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_ELF_FILE) $(PRODUCT_OUT)/ipa/signed
	# PIL split the output of the SecImage tool
	python $(PILSPLITTER_BASE)/pil-splitter.py \
		$(PRIVATE_OUT_GSI_FW)/$(PRIVATE_ELF_FILE) \
		$(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FW_FILE_NAME)
	cp -f $(PRIVATE_OUT_GSI_FW)/$(PRIVATE_FW_FILE_NAME).elf $@
endif # GSI FW file existence check

