/**=============================================================================

@file
   cvpTypes.h

@brief
   Types definition for Computer Vision Processor.

Copyright (c) 2017-2019 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc.

=============================================================================**/

//=============================================================================
///@details CVP common types
///@ingroup cvp_type
//=============================================================================

#ifndef CVP_TYPES_H
#define CVP_TYPES_H

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C"
{
#endif

typedef float  float32_t;
typedef double float64_t;

#if defined(WIN32)
    #ifdef MSVC
        #define CVP_API
    #else
        #define CVP_API __declspec(dllexport)
    #endif
    #define INLINE __forceinline
#else
    #define CVP_API __attribute__ ((visibility ("default")))
    #define INLINE inline
#endif

//------------------------------------------------------------------------------
/// @brief
///    Max cvp image plane
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
#define CVP_MAX_PLANE   4

//------------------------------------------------------------------------------
/// @brief
///    CVP session
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef void* cvpSession;

//------------------------------------------------------------------------------
/// @brief
///    Handle for CVP
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef void* cvpHandle;

//------------------------------------------------------------------------------
/// @brief
///    CVP DSP session Handle
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef uint32_t cvpSessionDSP;

//------------------------------------------------------------------------------
/// @brief
///    DSP Handle for CVP
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef uint32_t cvpHandleDSP;

//------------------------------------------------------------------------------
/// @brief
///    Defines the status returned by a function.
///
/// @param CVP_SUCCESS
///    Success
/// @param CVP_EFAIL
///    General failure
/// @param CVP_EUNALIGNPARAM
///    Unaligned pointer parameter
/// @param CVP_EBADPARAM
///    Bad parameters
/// @param CVP_EMISSINGTASK
///    Missing task
/// @param CVP_EINVALSTATE
///    Called at invalid state
/// @param CVP_ENORES
///    Insufficient resources, memory, thread...
/// @param CVP_EUNSUPPORTED
///    Unsupported feature
/// @param CVP_ECLOCKEXCEEDSLIMIT
///    Clock / Bandwidth Requested Exceeds Limits.Unrecoverable Fatal Error.
/// @param CVP_EFATAL
///    Generic Unrecoverable Fatal Error.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_SUCCESS = 0,
   CVP_EFAIL,
   CVP_EUNALIGNPARAM,
   CVP_EBADPARAM,
   CVP_EMISSINGTASK,
   CVP_EINVALSTATE,
   CVP_ENORES,
   CVP_EUNSUPPORTED,
   CVP_ECLOCKEXCEEDSLIMIT,
   CVP_EFATAL,
} cvpStatus;

//------------------------------------------------------------------------------
/// @brief
///    Defines Asynchronous Error Event Generated by CVP Hardware.
///
/// @param CVP_EVFATAL
///    Unrecoverable CVP Hardware Error Event
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_EVFATAL = 0,
} cvpEvent;

//------------------------------------------------------------------------------
/// @brief
///    Enumeration representing several Color Formats supported throughout
///    CVP.
/// @param CVP_COLORFORMAT_GRAY_8BIT
///    Gray 8 bit in one plane. These are the alignment requirements:
///    - Y (luma) width stride: 128 byte aligned.
///    - Y (luma) height stride: 32 byte aligned.
///    - Y (luma) aligned size: 4096 byte aligned.
/// @param CVP_COLORFORMAT_GRAY_UBWC
///    UBWC Gray format. Contains two planes of a lossless-compressed gray image.
///    First plane is the gray (luma) meta information and the second plane is
///    the compressed gray (luma) image data. These are the alignment requirements:
///    - 1st plane Y (luma) meta width stride: 64 byte aligned
///    - 1st plane Y (luma) meta height stride: 16 byte aligned
///    - 1st plane Y (luma) meta aligned size: 4096 byte aligned
///    - 2nd plane Y (luma) width stride: 128 byte aligned
///    - 2nd plane Y (luma) height stride: 32 byte aligned
///    - 2nd plane Y (luma) aligned size: 4096 byte aligned
/// @param CVP_COLORFORMAT_NV12
///    NV12 color format. Contains two planes. First plane is gray 8 bit(luma) image.
///    Second plane is the interleaved 2x2 subsampled color (Cb, Cr) information.
///    These are the alignment requirements:
///    - 1st plane Y (luma) width stride: 128 byte aligned.
///    - 1st plane Y (luma) height stride: 32 byte aligned.
///    - 1st plane Y (luma) aligned size: 4096 byte aligned.
///    - 2nd plane CbCr width stride: 128 byte aligned.
///    - 2nd plane CbCr height stride: 16 byte aligned.
///    - 2nd plane CbCr aligned size: 4096 byte aligned.
/// @param CVP_COLORFORMAT_NV12_UBWC
///    UBWC NV12 color format. Contains four planes of a lossless-compressed color
///    image. First plane is the gray (luma) meta information.
///    Second plane is the compressed gray (luma) image data.
///    Third plane is the color meta information.
///    Fourth plane is the compressed interleaved 2x2 subsampled color (Cb, Cr) information.
///    These are the alignment requirements:
///    - 1st plane Y (luma) meta width stride: 64 byte aligned
///    - 1st plane Y (luma) meta height stride: 16 byte aligned
///    - 1st plane Y (luma) meta aligned size: 4096 byte aligned
///    - 2nd plane Y (luma) width stride: 128 byte aligned
///    - 2nd plane Y (luma) height stride: 32 byte aligned
///    - 2nd plane Y (luma) aligned size: 4096 byte aligned
///    - 3rd plane CbCr meta width stride: 64 byte aligned
///    - 3rd plane CbCr meta height stride: 16 byte aligned
///    - 3rd plane CbCr meta aligned size: 4096 byte aligned
///    - 4th plane CbCr width stride: 128 byte aligned
///    - 4th plane CbCr height stride: 32 byte aligned
///    - 4th plane CbCr aligned size: 4096 byte aligned
/// @param CVP_COLORFORMAT_NV12_UBWC_4R
///    TBA
/// @param CVP_COLORFORMAT_PD10
///    TBA
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_COLORFORMAT_GRAY_8BIT = 0,
   CVP_COLORFORMAT_GRAY_UBWC,
   CVP_COLORFORMAT_NV12,
   CVP_COLORFORMAT_NV12_UBWC,
   CVP_COLORFORMAT_NV12_UBWC_4R,
   CVP_COLORFORMAT_PD10
} cvpColorFormat;

//------------------------------------------------------------------------------
/// @brief
///    Enumeration that represent the pixel precision.
/// @param CVP_INTEGER_PRECISION
///    Full pel precision. Only use an integer  of the distance between pixels.
/// @param CVP_HALFPEL_PRECISION
///    Half pel precision. Can use up to a half of the distance between pixels.
/// @param CVP_QPEL_PRECISION
///    Quarter pel precision. Can use up to a quarter of the distance between pixels.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_INTEGER_PRECISION = 0,
   CVP_HALFPEL_PRECISION,
   CVP_QPEL_PRECISION
} cvpPixelPrecision;

//------------------------------------------------------------------------------
/// @brief
///    Enumeration that represent the type of memory.
/// @param CVP_MEM_NON_SECURE
///    Non secure memory.
/// @param CVP_MEM_SECURE_PIXEL
///    CVP secure pixel memory.
/// @param CVP_MEM_SECURE_NON_PIXEL
///    CVP secure non pixel memory.
///
/// @ingroup cvp_mem_management
//------------------------------------------------------------------------------
typedef enum
{
   CVP_MEM_NON_SECURE = 0,
   CVP_MEM_SECURE_PIXEL,
   CVP_MEM_SECURE_NON_PIXEL
} cvpMemSecureType;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing the cvp memory
/// @param eType
///    CVP secure memory type.
/// @param nSize
///    Memory size in bytes.
/// @param nFD
///    Memory file descriptor. File descritor is not available for simulator.
/// @param nOffset
///    Memory offset.
/// @param pAddr
///    Pointer to the current process' virtual address if available. The virtual
///    address is only available for the non secure memory.
///
/// @ingroup cvp_mem_management
//------------------------------------------------------------------------------
typedef struct _cvpMem
{
   cvpMemSecureType eType;
   uint32_t         nSize;
   int32_t          nFD;
   uint32_t         nOffset;
   void*            pAddress;

   #ifdef __cplusplus
   INLINE _cvpMem() : eType(CVP_MEM_NON_SECURE),
                      nSize(0),
                      nFD(-1),
                      nOffset(0),
                      pAddress(NULL) {}
   #endif
} cvpMem;

// -----------------------------------------------------------------------------
/// @brief
///    Structure representing a CVP version.
/// @details
///     CVP version contains Major.Minor.Revision number.
///     An increase in "Major" indicates that a previously released API has changed,
///     so a developer may encounter compilation issues which require modification
///     of their code in order to adhere to the modified API.  Qualcomm will make
///     every effort to minimize these changes.  Additionally, new functions and
///     implementation modifications may be present.
///     An increase in "Minor" indicates that new functions have been added to the
///     library, so additional functionality is available, however existing APIs
///     have not changed.  Additionally, implementation modifications may be
///     present.
///     An increase in "Revision" indicates that implementation modifications only have
///     been made.
/// @param nMajor
///    Major version number.
/// @param nMinor
///    Minor version number.
/// @param nRevision
///    Revision version number.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpVersion
{
   uint32_t nMajor;
   uint32_t nMinor;
   uint32_t nRevision;

   #ifdef __cplusplus
   INLINE _cvpVersion() : nMajor(0), nMinor(0), nRevision(0){}
   #endif

} cvpVersion;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing the image information for CVP.
/// @param eFormat
///    Enum representing the color format of the image.
/// @param nWidth
///    Width of the Image.
/// @param nHeight
///    Height of the Image.
/// @param nPlane
///    Number of Image Planes. Valid values are 1 - CVP_MAX_PLANE.
/// @param nTotalSize
///    Total memory size that is required to be allocated. It's the sum of nAlignedSize.
/// @param nWidthStride
///    Array of width stride values. Represent width strides of the planes in the order
///    that they appear in the respective formats. Width stride value is in bytes which
///    is the number of bytes from beginning of one line of the plane buffer to the next.
///    The stride must meet the color format alignment requirement.
/// @param nAlignedSize
///    Array of aligned size values. Represent aligned sizes of the planes in the
///    order that they appear in the respective formats.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpImageInfo {
   cvpColorFormat eFormat;
   uint32_t       nWidth;
   uint32_t       nHeight;
   uint32_t       nPlane;
   uint32_t       nTotalSize;
   uint32_t       nWidthStride[CVP_MAX_PLANE];
   uint32_t       nAlignedSize[CVP_MAX_PLANE];

   #ifdef __cplusplus
   INLINE _cvpImageInfo() : eFormat(CVP_COLORFORMAT_GRAY_8BIT),
                            nWidth(0), nHeight(0), nPlane(1)

   {
      memset(nWidthStride, 0, sizeof(nWidthStride));
      memset(nAlignedSize, 0, sizeof(nAlignedSize));
   }
   #endif
} cvpImageInfo;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing an image for CVP
/// @param pImage
///    Pointer to the memory location which contains the image data.
///    The memory size for pImage is equal to the sum of nAlignedSize of its plane(s).
/// @param sImageInfo
///    Structure of image information.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpImage {
   cvpMem       *pBuffer;
   cvpImageInfo  sImageInfo;

   #ifdef __cplusplus
   INLINE _cvpImage() : pBuffer(NULL){}
   #endif
} cvpImage;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing region of interest (ROI)
/// @param nLeft
///    Left of ROI.
/// @param nTop
///    Top of ROI.
/// @param nWidth
///    Width of ROI.
/// @param nHeight
///    Height of ROI.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpRoi
{
   uint32_t nLeft;
   uint32_t nTop;
   uint32_t nWidth;
   uint32_t nHeight;

   #ifdef __cplusplus
   INLINE _cvpRoi() : nLeft(0),
                      nTop(0),
                      nWidth(0),
                      nHeight(0){}
   #endif
} cvpRoi;

//------------------------------------------------------------------------------
/// @brief
///    Structure for CVP Fence Object
/// @param nSyncParam
///    Integer holding fence handle.
/// @param nSecureKey
///    Integer holding secure key exported by synx framework.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpFence
{
   int32_t  nSyncParam;
   uint32_t nSecureKey;

   #ifdef __cplusplus
   INLINE _cvpFence() : nSyncParam(0),
                        nSecureKey(0){}
   #endif
} cvpFence;

//------------------------------------------------------------------------------
/// @brief
///    Structure for collection of CVP fence objects
/// @param pIn
///    Pointer to input fence objects. CVP library will wait the signal
///    from client before processing the face detection.
///    For example, client can use it to signal the readiness of pImage.
/// @param nIn
///    Number of input fence objects.
/// @param pOut
///    Pointer to output fence objects. CVP library will send the signal
///    to client after processing the face detection and the output is ready to
///    be consumed by the client.
///    For example, client can use it to wait for the readiness of pOutput.
/// @param nOut
///    Number of output fence objects.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpFences
{
   cvpFence *pIn;
   uint32_t  nIn;
   cvpFence *pOut;
   uint32_t  nOut;

   #ifdef __cplusplus
   INLINE _cvpFences() : pIn(NULL),
                         nIn(0),
                         pOut(NULL),
                         nOut(0){}
   #endif
} cvpFences;


#ifdef __cplusplus
}//extern "C"
#endif

#endif
